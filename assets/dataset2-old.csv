Question,Marks,Topic,Difficulty
"Given two integer arrays and , find an integer that appears in both arrays (or report that no such integer exists). Assuming , give a crisp and concise algorithm in structured English satisfying following performance requirements: ï‚· The amount of extra space (besides and ) must be constant. It is fine to modify and . ï‚· The worst case running time must be .",6,ARRAY,5
Let A[0 .. n â€“ 1] be an array of numbers. A number A[i] is called a principal if it is greater than the mean of all numbers from A[i] to A[n â€“ 1]. Write an efficient pseudo-code to delete all the principal numbers in the array A. Explain the proposed logic with the help of an example.,3,ARRAY,6
"A Sparse matrix is represented in the form of a linked list, having four different types of nodes (Fig. (10) 3), namely elementNode, 
 columnHeaderNode, rowHeaderNode, and specialHeaderNode. Write
 an efficient algorithm/pseudo-code for these two functions following the given function signatures
 and template (Fig. 4). Assume the functions specified in the template are already implemented.
 (a)Compute sum of two sparse matrices.
 specialHeaderNode* sparseMatAdd (specialHeaderNode *mat1, specialHeaderNode *mat2)",5,ARRAY,6
"Insert new elementNode at its correct place in the matrix.
specialHeaderNode* insert(specialHeaderNode *mat1, elementNode *e)
};
struct elementNode
{ int rowNum, colNum, val;
elementNode *nextEleNodeInRow;
elementNode *nextEleNodeInCol; };
struct columnHeaderNode { int columnNum;
elementNode *firstEleInCol; columnHeaderNode *nextColHeader;
struct rowHeaderNode { int rowNum;
elementNode *firstEleInRow;
rowHeaderNode *nextRowHeader;
};
struct specialHeaderNode 17.{ int totalRow, totalCol;
columnHeaderNode *ColHeader;
rowHeaderNode *RowHeader;
};
//Function that creates, initializes, and returns a new elementNode. It initializes both the
//member pointers in elementNode structure to NULL.
elementNode* newElementNode(int row, int column, int value);
//Function that creates and initializes row as well as column header nodes for a particular
//matrix. It initializes all the member pointers in columnHeaderNode and rowHeaderNode
//structures to NULL.
specialHeaderNode* generateRowColHeaders(specialHeaderNode *mat1, int totalRow, int totalCol);",5,ARRAY,8
"Predict output of following program
int main()
{
int i;
int arr[5] = {1};
for (i = 0; i < 5; i++)
printf(""%d "", arr[i]);
return 0;
}",4,ARRAY,2
"Predict output of the following program:
int main()
{
int a[][] = {{1,2},{3,4}};
int i, j;
for (i = 0; i < 2; i++)
for (j = 0; j < 2; j++)
printf(""%d "", a[i][j]);
return 0;
}",4,ARRAY,2
"For a C program accessing X[i][j][k], the following intermediate code is generated by a compiler. Assume that the size of an integer is 32 bits and the size of a character is 8 bits.

t0 = i * 1024
t1= j * 32
t2 = k * 4
t3 =t1 + t0
t4 = t3 + t2
t5 = X[t4]
Which one of the following statement about the source code of C program is correct?",8,ARRAY,5
How do you find the missing number in a given integer array of 1 to 100?,8,ARRAY,9
How do you find the duplicate number on a given integer array?,8,ARRAY,9
How do you find the largest and smallest number in an unsorted integer array?,8,ARRAY,9
How do you find all pairs of an integer array whose sum is equal to a given number?,10,ARRAY,9
How do you find duplicate numbers in an array if it contains multiple duplicates?,10,ARRAY,9
How to remove duplicates from a given array in Java?,10,ARRAY,9
How do you search a target value in a rotated array?,10,ARRAY,9
"Given an unsorted array of integers, find the length of the longest consecutive elements sequence?",8,ARRAY,9
How is an integer array sorted in place using the quicksort algorithm?,10,ARRAY,9
How do you remove duplicates from an array in place?,8,ARRAY,9
How do you reverse an array in place in Java?,10,ARRAY,9
How are duplicates removed from an array without using any library?,8,ARRAY,9
How to convert a byte array to String?,10,ARRAY,9
What is the difference between an array and a linked list?,10,ARRAY,9
How do you perform a binary search in a given array?,10,ARRAY,9
How to find a median of two sorts arrays?,10,ARRAY,9
How to rotate an array left and right by a given number K?,10,ARRAY,9
How do you find duplicates from an unsorted array?,8,ARRAY,9
"Given an array of integers sorted in ascending order, find the starting and ending position of a given value?",10,ARRAY,9
"Given an integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum?",8,ARRAY,9
Write a C++ program to find the largest element of a given array of integers.,10,ARRAY,5
Write a C++ program to find the largest three elements in an array.,10,ARRAY,5
Write a C++ program to find second largest element in a given array of integers,7,ARRAY,5
Write a C++ program to find k largest elements in a given array of integers.,7,ARRAY,5
Write a C++ program to find the second smallest elements in a given array of integers.,7,ARRAY,5
Write a C++ program to find all elements in array of integers which have at-least two greater elements,7,ARRAY,5
Write a C++ program to find the most occurring element in an array of integers.,7,ARRAY,5
Write a C++ program to find the next greater element of every element of a given array of integers. Ignore those elements which have no greater element.,7,ARRAY,5
"Write a C++ program to sort a given unsorted array of integers, in wave form",7,ARRAY,5
Write a C++ program to update every array element by multiplication of next and previous values of a given array of integers,7,ARRAY,5
Write a C++ program to find the smallest element missing in a sorted array.,7,ARRAY,5
Write a C++ program to rearrange the elements of a given array of integers in zig-zag fashion way,7,ARRAY,5
"Write a C++ program to separate even and odd numbers of an array of integers. Put all even numbers first, and then odd numbers",7,ARRAY,5
Write a C++ program to separate 0s and 1s from a given array of values 0 and 1,7,ARRAY,5
Write a C++ program to rearrange a given sorted array of positive integers .,7,ARRAY,5
"Write a C++ program to sort a given array of 0s, 1s and 2s. In the final array put all 0s first, then all 1s and all 2s in last.",7,ARRAY,5
Write a C++ program to sort (in descending order) an array of distinct elements according to absolute difference of array elements and with a given value,7,ARRAY,5
Write a C++ program to move all negative elements of an array of integers to the end of the array without changing the order of positive element and negative element,7,ARRAY,5
Write a C++ program to find a number which occurs odd number of times of a given array of positive integers. In the said array all numbers occur even number of times.,7,ARRAY,5
Write a C++ program to count the number of occurrences of given number in a sorted array of integers,7,ARRAY,5
Write a C++ program to find the two repeating elements in a given array of integers,7,ARRAY,5
Write a C++ program to find the missing element from two given arrays of integers except one element.,7,ARRAY,5
Write a C++ program to find the element that appears once in an array of integers and every other element appears twice.,7,ARRAY,5
Write a C++ program to find the first repeating element in an array of integers.,7,ARRAY,5
Write a C++ program to find and print all common elements in three sorted arrays of integers.,7,ARRAY,5
Write a C++ program to find and print all unique elements of a given array of integers.,7,ARRAY,5
Write a C++ program to find the number of pairs of integers in a given array of integers whose sum is equal to a specified number.,7,ARRAY,5
Write a C++ program to arrange the numbers of a given array in a way that the sum of some numbers equal the largest number in the array.,7,ARRAY,5
Write a C++ program to find the second lowest and highest numbers in a given array.,7,ARRAY,5
Find a pair with the given sum in an array,10,ARRAY,9
Check if a subarray with 0 sum exists or not,10,ARRAY,9
Print all subarrays with 0 sum,10,ARRAY,9
Sort binary array in linear time,10,ARRAY,9
Find maximum length subarray having a given sum,10,ARRAY,9
Find maximum length subarray having an equal number of 0’s and 1’s,10,ARRAY,9
Find the maximum product of two integers in an array,10,ARRAY,9
"Sort an array of 0’s, 1’s, and 2’s (Dutch National Flag Problem)",10,ARRAY,9
In-place merge two sorted arrays,10,ARRAY,9
Merge two arrays by satisfying given constraints,10,ARRAY,9
Find the index of 0 to be replaced to get the maximum length sequence of continuous ones,10,ARRAY,9
Shuffle an array using Fisher–Yates shuffle algorithm,10,ARRAY,9
Rearrange an array with alternate high and low elements,10,ARRAY,9
Find equilibrium index of an array,10,ARRAY,9
Find the largest subarray formed by consecutive integers,10,ARRAY,9
Find majority element (Boyer–Moore Majority Vote Algorithm),10,ARRAY,9
Move all zeros present in an array to the end,10,ARRAY,9
Replace every array element with the product of every other element,10,ARRAY,9
Longest Bitonic Subarray Problem,10,ARRAY,9
Find the maximum difference between two array elements that satisfies the given constraints,10,ARRAY,9
Print continuous subarray with maximum sum,10,ARRAY,9
Maximum Sum Circular Subarray,10,ARRAY,9
Find all distinct combinations of a given length – I,10,ARRAY,9
Find the maximum sequence of continuous 1’s formed by replacing at-most k zeroes by ones,10,ARRAY,9
Find minimum sum subarray of size k,10,ARRAY,9
Maximum Product Subarray Problem,10,ARRAY,9
Find a subarray having the given sum in an integer array,10,ARRAY,9
Find the smallest subarray length whose sum of elements is greater than k,10,ARRAY,9
Find the smallest window in an array sorting which will make the entire array sorted,10,ARRAY,9
Find maximum sum path involving elements of given arrays,10,ARRAY,9
Find maximum profit earned by buying and selling shares any number of times,10,ARRAY,9
Find minimum platforms needed to avoid delay in the train arrival,10,ARRAY,9
Decode an array constructed from another array,10,ARRAY,9
Sort an array in one swap whose two elements are swapped,10,ARRAY,9
Find a triplet with the given sum in an array,10,ARRAY,9
Find the longest continuous sequence length with the same sum in given binary arrays,10,ARRAY,9
Reverse every consecutive m-elements of a subarray,10,ARRAY,9
Maximum Product Subset Problem,10,ARRAY,9
Find pairs with difference k in an array,10,ARRAY,9
4–Sum Problem | Quadruplets with a given sum,10,ARRAY,9
Print all quadruplets with a given sum | 4 sum problem extended,10,ARRAY,9
Quickselect Algorithm,10,ARRAY,9
Rearrange array such that A[A[i]] is set to i for every element A[i],10,ARRAY,9
Print all triplets that form an arithmetic progression,10,ARRAY,9
Print all triplets that form a geometric progression,10,ARRAY,9
Group elements of an array based on their first occurrence,10,ARRAY,9
"In n-Queens, some solutions are simply reflections of others. For example, two (10) solutions (Fig. 2) for 4-Queens problem are equivalent under reflection. (a) Modify NQueens Algorithm (Fig. 3) to get unique solutions only. (b) Execute the NQueens Algorithms devised in Q7. (a) for Draw the associated state space search trees separately for each value of .Algorithm NQueens(k,n) { for i = 1 to n do { if (Place(k,i)) then { x[k] = i; if (k == n) print x[1..n]; else NQueens(k+1,n); } } } // Returns true if Queen can be placed in kth row ith // column. Algorithm Place(k,i) { for j = 1 to k â€“ 1 do if ((x[j] == i) OR (Abs(x[j] â€“ i) == Abs(j â€“ k))) return false; return true;",10,BACKTRACKING,8
"Write algorithm for n queen problem using backtracking approach. Discuss your algorithm
step wise for a 4x4 chess board.",14,BACKTRACKING,9
What happens when the backtracking algorithm reaches a complete solution? explain,3,BACKTRACKING,2
N Queens Problem,5,BACKTRACKING,9
Warnsdorff’s Algorithm,5,BACKTRACKING,9
Word Break Problem,5,BACKTRACKING,9
Remove Invalid Parenthesis,5,BACKTRACKING,9
Match a pattern and string using regular expression,5,BACKTRACKING,9
Find Path from corner cell to middle cell in a maze,5,BACKTRACKING,9
Hamiltonian cycle,5,BACKTRACKING,9
Sudoku solver,5,BACKTRACKING,9
M Coloring Problem,5,BACKTRACKING,9
Rat in a Maze,5,BACKTRACKING,9
Tug of war,5,BACKTRACKING,9
Subset sum,5,BACKTRACKING,9
What is the difference between Backtracking and Recursion?,2,BACKTRACKING,5
What is Exhaustive Search?,3,BACKTRACKING,5
Explain what is DFS (Depth First Search) algorithm for a Graph and how does it work?,3,BACKTRACKING,5
Explain what is Explicit and Implicit Backtracking Constrains?,3,BACKTRACKING,5
"Which of the problems cannot be solved by backtracking method?
A
n-queen problem
B
subset sum problem
C
hamiltonian circuit problem
D
travelling salesman problem . expalin why",4,BACKTRACKING,2
"Backtracking algorithm is implemented by constructing a tree of choice s called as?
A
State-space tree
B
State-chart tree
C
Node tree
D
Backtracking tree . explain why",4,BACKTRACKING,2
What happens when the backtracking algorithm reaches a complete solution?,3,BACKTRACKING,2
A node is said to be ..... if it has a possibility of reaching a complete solution.,1,BACKTRACKING,2
In what manner is a state-space tree for a backtracking algorithm constructed?,1,BACKTRACKING,2
Magnet Puzzle,8,BACKTRACKING,9
Print all k–colorable configurations of a graph (Vertex coloring of a graph),10,BACKTRACKING,9
Find the minimum number possible by doing at-most `k` swaps,10,BACKTRACKING,9
Print all triplets in an array with a sum less than or equal to a given number,10,BACKTRACKING,9
Find all possible combinations by replacing given digits with characters of the corresponding list,8,BACKTRACKING,9
Find all combinations of non-overlapping substrings of a string,10,BACKTRACKING,5
Find all binary strings that can be formed from a wildcard pattern,10,BACKTRACKING,5
Find ways to calculate a target from elements of the specified array,10,BACKTRACKING,5
"In n-Queens, some solutions are simply reflections of others. For example, two
solutions (Fig. 2) for 4-Queens problem are equivalent under reflection.
(a) Modify NQueens
Algorithm (Fig. 3) to get
unique solutions only.
(b) Execute the NQueens
Algorithms devised in Q7.
(a) for .
Draw the associated state
space search trees
separately for each value
of .",10,BACKTRACKING,9
"Consider the following operation along with Enqueue and Dequeue operations on queues, where k is a global parameter.
MultiDequeue(Q){
m = k
while (Q is not empty and m > 0) {
Dequeue(Q)
m = m - 1
}
}
What is the worst case time complexity of a sequence of n MultiDequeue() operations on an initially empty queue? (GATE CS 2013) (A) \Theta(n) (B) \Theta(n + k) (C) \Theta(nk) (D) \Theta(n^2)",6,BACKTRACKING,9
"Draw a Binary Search Tree by sequentially inserting the following elements 40,50,22,33,30,80,15,25,60,90,75,44",4,BST,6
"For the BST obtained in Q2.(a), print the elements in Pre-order, In-order and Post-order traversals.",3,BST,1
"Delete in sequence 44, 50, and 40 from BST obtained in Q2.(a). Show the BST after each deletion.",3,BST,8
Let each node in a binary search tree keeps an attribute that points to â€™s inorder successor. Give a pseudocode for INSERT on a binary search tree using this representation.,6,BST,5
Draw a Binary Search Tree (BST) by sequentially inserting the following elements:,4,BST,6
Delete 76 from the BST obtained in Q.2.(a) and draw the resultant BST.,1,BST,2
What is a binary search tree?,2,BST,2
What is a self-balanced tree?,2,BST,2
What is an AVL tree?,2,BST,2
How do you convert a binary tree into a binary search tree,4,BST,5
How do you delete a node from a binary search tree?,4,BST,5
How many non-null links are there in a binary tree with N nodes?,2,BST,2
"The integers 7, 1, 12, 8, 3, 0, –1, 9 are inserted in that order into an initially empty binary search tree. Draw the tree after the last insertion.",6,BST,9
"In class, we studied binary search trees that do not allow us to insert duplicate elements. However, sometimes we do need to store duplicates. For example, a database of student marks might contain one record for every mark by every student; so if you’ve taken two courses, there will be two records with the same key (your student number) and different data (your two marks). To accomplish this, we might use a data structure called a “BST with duplicates”, or BSTD. A node in a BSTD is defined as follows: public class BSTDNode { public Comparable key; /* for inserting and searching */ public Data data; /* the rest of the data */ public BSTDNode left; /* left subtree */ public BSTDNode same; /* subtree of nodes with the same key */ public BSTDNode right; /* right subtree */ public BSTDNode (Comparable key, Data data) { this.key = key; this.data = data; } } public class Data { // various fields and methods that are not important } We assume that if we attempt to find a node with a key that is already present, we simply create a new node with this key, linking to it through the “same” instance variable. The order of the nodes with the same key is not important. In the following two examples, we suppose that both key and data are integers, so (1, 3) refers to a node where key is 1 and data is 3. Here are three trees. In each node, we show the key field and then the data field; for example, the root of the first tree is “(5,8)”, meaning that key is 5 and data is 8. T1 is a valid BSTD, but T2 and T3 are not valid. T2 is invalid because a node down the sequence of same links for key 5 has a non-null right child. T3 is invalid because identical keys (5) are found in two places that are not connected by same links. (5,8) (3,10) (5,10) (5,9) (8,3) (6,1) (11,5) (9,9) (2,3) (4,3) (4,7) T1 (good): (5,8) (3,10) (5,10) (5,9) (8,3) (6,1) (11,5) (9,9) (2,3) (4,3) (4,7) T2 (bad): (5,8) (3,10) (5,10) (5,9) (8,3) (6,1) (11,5) (9,9) (2,3) (4,3) (4,7) T3 (bad): CSC 148H1S-148H5S-A48H3S April-May 2005 Page 9 of 15 continued … 4. (continued) (a) [2 marks]. List the elements of T1 (the first example tree on the previous page) in pre-order. Write a node as (key, data). Remember that the order of nodes is determined by the key value, not by the data value. Within a “same” sequence, proceed from top to bottom. (5,8) (5,10) (5,9) (3,10) (2,3) (4,3) (4,7) (8,3) (6,1) (11,5) (9,9) (b) [2 marks]. List the elements of T1 in post-order. (2,3) (4,3) (4,7) (3,10) (6,1) (9,9) (11,5) (8,3) (5,8) (5,10) (5,9) (c) [3 marks]. Suppose these elements have been inserted into an initially empty BSTD, in the order shown: (5,4) (3,2) (8,1) (7,4) (3,5) (8,2) (2,8) (5,0) (6,2) (5,1) Draw the resulting BSTD, showing it schematically, as in the example diagrams on the previous page, with “/” indicating a left child, “\” indicating a right child, and “|” indicating a “same child”. (5,4) (3,2) (5,1) (5,0) (8,1) (7,4) (8,2) (6,2) (2,8) (3,5) CSC 148H1S-148H5S-A48H3S April-May 2005 Page 10 of 15 continued … 4. (continued) Now we declare a class LinkedBSTD as follows: public class LinkedBSTD { private BSTDNode root; // root of the tree // various methods } (d) [5 marks]. Write a method count(), in the LinkedBSTD class, that counts the number of occurrences of a node with a given key in the tree. If the node is not in the tree, it returns 0. You may assume the existence of this method: private static BSTDNode contains (BSTDNode t, Comparable k) { The method contains() returns a reference to a highest descendant of t that has key k. If t itself has key k, then the return value is t. If no descendant of t has key k, then null is returned. Remember: you don’t have to write contains(). Your method count() may be iterative or recursive. Here is its header line to get you started: public int count (Comparable k) {",10,BST,9
Draw the binary search tree that is created if the following numbers are inserted in the tree in the given order.,6,BST,9
Draw a balanced binary search tree containing the same numbers given in part (a),10,BST,9
How to search for a key in a binary search tree?,6,BST,9
Explain different Traversal of the Nodes in a BST,10,BST,9
"Given that 2 elements are present in the tree, write a function to find the LCA(Least Common Ancestor) of the 2 elements.",6,BST,5
What are the tasks performed during inorder traversal?,4,BST,5
. What are the tasks performed during postorder traversal?,4,BST,5
"Traverse the given tree using Inorder, Preorder and Postorder traversals.",6,BST,2
Prove that an in-order traversal of a binary search tree visits the nodes in order defined by the keys. Hint: what is the variable used for the proposition ? The number of nodes of the tree? Something else?,6,BST,9
"Give a non-recursive version of the binary search tree operations find, findMin, findMax",6,BST,9
"(a) Form a binary search tree of strings from the sentence: Form a binary search tree of strings In particular, the tree must be constructed by adding the words in the order they are found in the sentence, namely first add the word “Form” to an empty tree, then add the word “a”, etc. (b) What is the tree that results, if you run remove(‘‘Form’’) on the tree in (a) ?",6,BST,9
"The following numbers are inserted into an empty binary search tree in the given order: 10, 1, 3, 5, 15, 12, 16. What is the height of the binary search tree?",2,BST,2
"The number of ways in which the numbers 1, 2, 3, 4, 5, 6, 7 can be inserted in an empty binary search tree, such that the resulting tree has height 6, is.",2,BST,2
Consider the binary search tree with n elements. The time required to search given element is:,2,BST,2
List the types of Binary Search Tree. Explain Insertion and Deletion Operation on Binary Search Tree with Example.,10,BST,5
What is the meaning of height balanced tree? How rebalancing is done in height balanced tree.,10,BST,9
WAP to Convert a Binary Search Tree into a Min Heap,6,BST,9
WAP to Find a triplet with the given sum in a BST,6,BST,9
WAP to Construct a height-balanced BST from a sorted doubly linked list,6,BST,9
WAP to Construct a height-balanced BST from an unbalanced BST,6,BST,9
WAP to Merge two BSTs into a doubly-linked list in sorted order,6,BST,9
"WAP to Implement Treap Data Structure (Insert, Search, and Delete)",6,BST,9
WAP to Find optimal cost to construct a binary search tree,6,BST,9
WAP to Print binary tree structure with its contents in C++,6,BST,2
WAP to Print complete Binary Search Tree (BST) in increasing order,6,BST,2
WAP to Find the size of the largest BST in a binary tree,6,BST,9
WAP to Count subtrees in a BST whose nodes lie within a given range,6,BST,9
WAP to Build a Binary Search Tree from a preorder sequence,6,BST,5
WAP to Build a Binary Search Tree from a postorder sequence,6,BST,5
WAP to Check if a given sequence represents the preorder traversal of a BST,6,BST,9
WAP to Update every key in a BST to contain the sum of all greater keys,6,BST,5
WAP to Fix a binary tree that is only one swap away from becoming a BST,6,BST,9
WAP to Replace every array element with the least greater element on its right,6,BST,9
WAP to Find k’th smallest node in a Binary Search Tree (BST),6,BST,9
WAP to Find a pair with the given sum in a BST,6,BST,9
WAP to Remove nodes from a BST that have keys outside a valid range,6,BST,9
WAP to Find floor and ceil in a Binary Search Tree,6,BST,2
WAP to Find the Lowest Common Ancestor (LCA) of two nodes in a BST,6,BST,9
WAP for Diagonal Traversal of a tree,6,BST,9
WAP for ZigZag Level Order Traversal BT,6,BST,9
WAP to find Max Depth of Binary Tree,6,BST,9
WAP to Flatten Binary Tree to Linked List,6,BST,9
WAP to find Path to Given Node,6,BST,9
WAP to Remove Half Nodes,6,BST,9
WAP to Invert the Binary Tree,6,BST,9
WAP to convert Sorted Array To Balanced BST,6,BST,9
What is the difference between binary and binary search trees?,4,BST,2
WAP to print right view,6,BST,9
(a) Solve the following recurrence relation.,1,COMPLEXITY,2
"(b) Find the recurrence relation and solve it for the function given in Fig. 1.
 1. int power(int x, int n)
 2. { if (n==0)
 3. return 1;
 4. else if (n==1)
 5. return x;
 6. else if ((n%2)==0)
 7. return power(x, n/2)*power(x, n/2);
 8. else
 9. return power(x, n/2)*power(x, n/2);
 10. }",2,COMPLEXITY,4
"(a) Let f(n) = 7n + 8 and g(n) = n. Is f(n) = O(g(n))?
 If yes, then determine the values of n0 and c showing all intermediate steps.
 If no, then justify your answer with appropriate explanation.",1,COMPLEXITY,1
"An algorithm ALGO consists of two tuneable sub-algorithms ALGOA and ALGOB, which have to be executed serially. Given any function f(n), one can tune ALGOA and ALGOB such that one run of ALGOA takes time O(f(n)) and ALGOB takes time O(n/f(n)). For the given scenario, determine the smallest growing function f(n) which minimizes the overall runtime of ALGO.",2,COMPLEXITY,4
"Answer the following questions with respect to the function given in Fig. 4.
 
 (a) What is the purpose of designing it? [Hint: Use n <= 5, 1 <= k <= n]
 
 (b) What is its complexity?
 
 (c) Is answer to Q7.(b) dependent on the value of k? If yes, then for k > n suggest a single line modification in the given function to maintain the identified time complexity as in Q7.(b). If no, then give suitable justification with examples for the identified independency.
 1. /* Integer n is the number of elements in an array A[0..nâ€“1]. */
 
 2. void module(int *A, int n, int k)
 
 3. { int temp, i, j;
 
 4. for (j = 0; j < k; j++)
 
 5. { temp = A[n-1];
 
 6. for (i = n - 1; i > 0; i--)
 
 7. A[i] = A[i - 1];
 
 8. A[i] = temp;
 
 9. }
 
 10. }",2,COMPLEXITY,6
"Compute complexity of the following pseudo-codes giving proper justifications.(a)
for (int i = 1; i <= n; i++)
for(int j = 1; j <= i; j++)
for(int k = 1; k <= j; k++)
{ â€¦ }
(b)
for (int p = 1; p + n/2 <= n; p++)
for(int q = n; q > 0; q /= 2)
for(int r = 1; r*r <= n; r++)
for(int s = 1; s < n; s++)
{ break; â€¦ }
(c)
m = n;
while ( n > 0)
{ for(int i = 0; i < m; i++)
â€¦
n = n/3;
}",3,COMPLEXITY,4
"The correct order of the efficiency of the following sorting algorithms according to their overall running time comparision is? Also write the complexity of each one of them
a) Insertion>selection>bubble
b) Insertion>bubble>selection
c) Selection>bubble>insertion
d) bubble>selection>insertion",3,COMPLEXITY,3
"The total number of comparisons in bubble sort is. Explain
a) O(n.logn)
b) O(2n)
c) O(n^2)
d) None of the above",4,COMPLEXITY,5
"Running time of an algorithm T(n), where n is input size, is given by T(n) = 8T(n/2) + qn, if n > 1 and T(n) = p if n = 1, where p and q are constants. The order of the algorithm is.",3,COMPLEXITY,4
An algorithm consists of two modules: x1 and x2. Their orders are f(n) and g(n) respectively. The order of the algorithm is.,2,COMPLEXITY,3
"Running time T(n) where 'n' is the input size of the recursive algorithm given as : T(n) = c + T(n-1), if n > 1 ; T(n) = d if n < 1. The order of the algorithm is.",3,COMPLEXITY,4
"For merging two sorted lists of sizes m and n, into a sorted list of size m+n, the number of comparisons required are",2,COMPLEXITY,2
"The average number of comparisons in sequential search is 
a) n^2
b) n(n-1) / 2
c) n(n+1) / 2
d) (n+1) /2",2,COMPLEXITY,4
"The running time of quick sort depends most heavily on the selection of ? Explain
a) No of inputs
b) Arrangement of elements in array
c) Size of elements
d) Pivot element",2,COMPLEXITY,4
"Which of the following functions has the largest growth rate? 
a) n^(1/2)
b) n^100
c) 2^(n/2)
d) 2^(n!)",1,COMPLEXITY,2
The worst case for a linear search algorithm is when the item is at what position. Also write down the time complexity,2,COMPLEXITY,2
The complexity of Binary search algorithm is. Explain,3,COMPLEXITY,4
"Solve the following recurrence relation using Master’s theorem-

T(n) = 3T(n/2) + n2",4,COMPLEXITY,6
"Solve the following recurrence relation using Master’s theorem-

T(n) = 2T(n/2) + nlogn",4,COMPLEXITY,6
"Solve the following recurrence relation using Master’s theorem-

T(n) = 2T(n/4) + n0.51",4,COMPLEXITY,6
"Solve the following recurrence relation using Master’s theorem-

T(n) = √2T(n/2) + logn",5,COMPLEXITY,7
"Solve the following recurrence relation using Master’s theorem-

T(n) = 8T(n/4) – n2logn",5,COMPLEXITY,6
"Solve the following recurrence relation using Master’s theorem-

T(n) = 3T(n/3) + n/2",5,COMPLEXITY,6
"Form a recurrence relation for the following code and solve it using Master’s theorem-

 A(n)
{
if(n<=1)
return 1;
else
return A(√n);
}",4,COMPLEXITY,5
"Consider the recurrence relation a1=4, an=5n+an-1. The value of a64 is",2,COMPLEXITY,4
Determine the solution of the recurrence relation Fn=20Fn-1 − 25Fn-2 where F0=4 and F1=14.,2,COMPLEXITY,4
"What is the recurrence relation for 1, 7, 31, 127, 499?
a) bn+1=5bn-1+3
b) bn=4bn+7!
c) bn=4bn-1+3
d) bn=bn-1+1",2,COMPLEXITY,5
"If Sn=4Sn-1+12n, where S0=6 and S1=7, find the solution for the recurrence relation.",3,COMPLEXITY,5
"Find the value of a4 for the recurrence relation an=2an-1+3, with a0=6.",3,COMPLEXITY,4
"The solution to the recurrence relation an=an-1+2n, with initial term a0=2 are",2,COMPLEXITY,3
Determine the solution for the recurrence relation bn=8bn-1−12bn-2 with b0=3 and b1=4.,2,COMPLEXITY,4
What is the solution to the recurrence relation an=5an-1+6an-2?,3,COMPLEXITY,4
Determine the value of a2 for the recurrence relation an = 17an-1 + 30n with a0=3.,3,COMPLEXITY,4
Determine the solution for the recurrence relation an = 6an-1−8an-2 provided initial conditions a0=3 and a1=5.,4,COMPLEXITY,5
"Solve the following recurrence relation?
T(n) = 7T(n/2) + 3n^2 + 2",5,COMPLEXITY,7
"Sort the following functions in the decreasing order of their asymptotic (big-O) complexity:
f1(n) = n^?n , f2(n) = 2^n, f3(n) = (1.000001)^n , f4(n) = n^(10)*2^(n/2)
(a) f2> f4> f1> f3
(b) f2> f4> f3> f1
(c) f1> f2> f3> f4
(d) f2> f1> f4> f3",3,COMPLEXITY,5
"f(n) = 2^(2n)
Which of the following correctly represents the above function? Explain
(a) O(2^n)
(b) O(2^n)
(c) O(2^n)
(d) None of these",2,COMPLEXITY,4
"Master’s theorem can be applied on which of the following recurrence relation, and why?
(a) T (n) = 2T (n/2) + 2^n
(b) T (n) = 2T (n/3) + sin(n)
(c) T (n) = T (n-2) + 2n^2 + 1
(d) None of these",3,COMPLEXITY,4
T(n) = 3T(n/2+ 47) + 2n^2 + 10*n – 1/2. T(n) will be,4,COMPLEXITY,6
Solve the recurrence relation Fn=5Fn−1−6Fn−2 where F0=1 and F1=4,4,COMPLEXITY,5
Solve the recurrence relation − Fn=10Fn−1−25Fn−2 where F0=3 and F1=17,3,COMPLEXITY,3
Solve the recurrence relation Fn=2Fn−1−2Fn−2 where F0=1 and F1=3,3,COMPLEXITY,3
"What is the time, space complexity of the following code: int a = 0, b = 0;
for (i = 0; i < N; i++) {
a = a + rand();
}
for (j = 0; j < M; j++) {
b = b + rand();
}",3,COMPLEXITY,4
"What is the time complexity of the following code: int a = 0;
for (i = 0; i < N; i++) {
for (j = N; j > i; j--) {
a = a + i + j;
}
}",3,COMPLEXITY,5
"What is the time complexity of the following code:
int i, j, k = 0;
for (i = n / 2; i <= n; i++) {
for (j = 2; j <= n; j = j * 2) {
k = k + n / 2;
}
}",3,COMPLEXITY,5
"What does it mean when we say that an algorithm X is asymptotically more efficient than Y? a) X will always be a better choice for small inputs
b) X will always be a better choice for large inputs
c) Y will always be a better choice for small inputs
d) X will always be a better choice for all inputs",1,COMPLEXITY,2
"What is the time complexity of the following code:
int a = 0, i = N;
while (i > 0) {
a += i;
i /= 2;
}",2,COMPLEXITY,4
"Which of the following best describes the useful criterion for comparing the efficiency of algorithms?

a) Time
b) Memory
c) Both of the above
d) None of the above",1,COMPLEXITY,1
"How is time complexity measured?
a) By counting the number of algorithms in an algorithm.
b) By counting the number of primitive operations performed by the algorithm on given input size.
c) By counting the size of data input to the algorithm.
d) None of the above",1,COMPLEXITY,1
Average case time complexity of quicksort?,1,COMPLEXITY,2
Worst case time complexity of quicksort?,1,COMPLEXITY,2
Time complexity of binary search?,1,COMPLEXITY,1
"There are n unsorted arrays: A1, A2, …, An. Assume that n is odd. Each of A1, A2, …, An contains n distinct elements. There are no common elements between any two arrays. The worst-case time complexity of computing the median of the medians of A1, A2, …, An is? Explain",1,COMPLEXITY,2
"Consider the following function from positive integers to real numbers:
10,n√,n,log2n,100n.
The CORRECT arrangement of the above functions in increasing order of asymptotic complexity is:
(A) log2n,100n,10,n√,n
(B) 100n,10,log2n,n√,n
(C) 10,100n,n√,log2n,n
(D) 100n,log2n,10,n√,n",2,COMPLEXITY,4
"Match the algorithms with their time complexities:
Algorithm Time complexity
(P) Towers of Hanoi with n disks (i)Θ(n2)
(Q) Binary search given n stored numbers (ii)Θ(nlogn)
(R) Heap sort given n numbers at the worst case (iii)Θ(2n)
(S) Addition of two n×n matrices (iv)Θ(logn)
(A) p→(iii),Q→(iv),R→(i),S→(ii)
(B) p→(iv),Q→(iii),R→(i),S→(ii)
(C) p→(iii),Q→(iv),R→(ii),S→(i)
(D) p→(iv),Q→(iii),R→(ii),S→(i)",4,COMPLEXITY,6
"Consider the following C function
int. fun(int.n) {
int i, j;
for(i = 1; i<= n; i++) {
for(j=1; j<n; j += i) {
printf("" %d %d"",i,j);
}
}
}
Time complexity of fun in terms of θ notation is",2,COMPLEXITY,3
"The worst case running times of Insertion sort, Merge sort and Quick sort, respectively, are:
(A) Θ(nlogn),Θ(nlogn),andΘ(n2)
(B) Θ(n2),Θ(n2),andΘ(nlog)
(C) Θ(n2),Θ(nlog),andΘ(nlogn)
(D) Θ(n2),Θ(nlog),andΘ(n2)",1,COMPLEXITY,2
"Consider the following C function.
int fun1 (int n){
int i, j, k, p, q = 0;
for (i = 1; i < n; ++i) {
p = 0;
for(j = n; j > 1; j = j/2)
++p;
for(k =1; k < p; k = k*2)
++q;
}
return q;
}
Which one of the following most closely approximates the return value of the function fun1?
(A) n3
(B) n*(log n)2
(C) n*log n
(D) n*log(log n)",2,COMPLEXITY,3
"An unordered list contains n distinct elements. The number of comparisons to find an element in this list that is neither maximum nor minimum is
(A) Θ(nlogn)
(B) Θ(n)
(C) Θ(logn)
(D) Θ(1)",2,COMPLEXITY,4
"Let f (n) = n and g(n) = n(1+sin n), where n is a positive integer. Which of the following statements is/are correct?
I. f (n) = O(g(n))
II. f (n) = Ω(g(n))
(A) Only I
(B) Only II
(C) Both I and II
(D) Neither I nor II",2,COMPLEXITY,3
"Consider the following function:
int unknown(int n){
int i, j, k=0;
for (i=n/2; i<=n; i++)
for (j=2; j<=n; j=j*2)
k = k + n/2;
return (k);
}
The return value of the function is
(A) Θ(n2)
(B) Θ(n2log n)
(C) Θ(n3)
(D) Θ(n3log n)",3,COMPLEXITY,5
"Two alternative packages A and B are available for processing a database having 10k records. Package A requires 0.0001n2 time units and package B requires 10nlog10n time units to process n records. What is the smallest value of k for which package B will be preferred over A?
(A) 12
(B) 10
(C) 6
(D) 5",3,COMPLEXITY,4
"Consider the following functions:
f(n) = 2n
g(n) = n!
h(n) = nlogn

Which of the following statements about the asymptotic behaviour of f(n), g(n), and h(n) is true?
(A) f(n) = O(g(n)); g(n) = O(h(n))
(B) f(n) = Ω(g(n)); g(n) = O(h(n))
(C) g(n) = O(f (n)); h(n) = O(f (n))
(D) h(n) = O(f (n)); g(n) = Ω(f (n))",4,COMPLEXITY,4
"What is the time & space complexity of the following code:
let a = 0, b = 0;
for (let i = 0; i < n; ++i) {
a = a + i;
}
for (let j = 0; j < m; ++j) {
b = b + j;
}",4,COMPLEXITY,5
"What is the time & space complexity of the following code:
let a = 0, b = 0;
for (let i = 0; i < n; ++i) {
for (let j = 0; j < n; ++j) {
a = a + j;
}
}
for (let k = 0; k < n; ++k) {
b = b + k;
}",4,COMPLEXITY,5
"What is the time and space complexity of the following code:
let a = 0;
for (let i = 0; i < n; ++i) {
for (let j = n; j > i; --j) {
a = a + i + j;
}
}",3,COMPLEXITY,4
What is an Algorithm?,1,COMPLEXITY,2
What is meant by the time complexity of an algorithm?,1,COMPLEXITY,1
What does a constant time complexity mean?,1,COMPLEXITY,1
How do you reduce the space complexity?,2,COMPLEXITY,3
"Which of the given options provides the increasing order of asymptotic complexity of functions f1, f2, f3 and f4?
f1(n) = 2^n
f2(n) = n^(3/2)
f3(n) = nLogn
f4(n) = n^(Logn)

a) f3, f2, f4, f1
b) f3, f2, f1, f4
c) f2, f3, f1, f4
d) f2, f3, f4, f1",3,COMPLEXITY,2
"Consider the following two functions. What are time complexities of the functions?
int fun1(int n)
{
if (n &lt;= 1) return n;
return 2*fun1(n-1);
}
int fun2(int n)
{
if (n &lt;= 1) return n;
return fun2(n-1) + fun2(n-1);
}",5,COMPLEXITY,5
"What is time complexity of fun()?
int fun(int n)
{
int count = 0;
for (int i = 0; i &lt; n; i++)
for (int j = i; j &gt; 0; j--)
count = count + 1;
return count;
}",5,COMPLEXITY,4
Recursion uses more memory space than iteration because,1,COMPLEXITY,2
"Let w(n) and A(n) denote respectively, the worst case and average case running time of an algorithm executed on an input of size n. which of the following is ALWAYS TRUE?

a) A(n) = Ω W(n)
b) A(n) = O W(n)
c) A(n) = Θ W(n)
d) A(n) = o W(n)",2,COMPLEXITY,3
"What is not true about insertion sort?

a) Exhibits the worst case performance when the initial array is sorted in reverse order.
b) Worst case and average case performance is Ο(n2)
c) Can be compared to the way a card player arranges his card from a card deck.
d) None of the above!",1,COMPLEXITY,2
"If queue is implemented using arrays, what would be the worst run time complexity of queue and dequeue operations?",2,COMPLEXITY,3
Singly-Linked List Time Complexity for Deletion (Average),2,COMPLEXITY,3
"What is the time complexity of the code below?
int count = 0;
for (int i = N; i > 0; i /= 2) {
for (int j = 0; j < i; j++) {
count += 1;
}
}",4,COMPLEXITY,6
Explain how the time complexity of Fibonacci program is reduced using dynamic programming,4,COMPLEXITY,6
"Which of the following case does not exist in complexity theory?
a) Best case
b) Worst case
c) Average case
d) Null case",1,COMPLEXITY,1
"If for an algorithm time complexity is given by O(log2n) then complexity will:

A. constant
B. polynomial
C. exponential
D. none of the mentioned",1,COMPLEXITY,2
"What are Big O, Big Omega and Big Theta notations, explain by using diagrams and graphs",3,COMPLEXITY,4
"Let G be a graph with ‘n’ nodes and let ‘m’ be the chromatic number of the graph. Then the time taken by the backtracking algorithm to color it is. Explain
(a) O(nm)
(b) O(n+m)
(c) O(nm)
(d) O(nmn)",2,COMPLEXITY,4
"What does it mean by the best, average and worst case time complexities?",3,COMPLEXITY,2
"Use dynamic programming to fully parenthesize the product of four matrices, i.e. such that the number of scalar multiplications gets minimized. Show each and every step.",10,DP,7
"Which of the following standard algorithms is not Dynamic Programming based. Also mention the time complexity difference between them.
A) Bellman–Ford Algorithm for single source shortest path
B) Floyd Warshall Algorithm for all pairs shortest paths
C) 0-1 Knapsack problem
D) Prim's Minimum Spanning Tree",3,DP,4
"Kadane algorithm is used to find. Also write the pseudo code for the same
A) Maximum sum subsequence in an array
B) Maximum sum subarray in an array
C) Maximum product subsequence in an array
D) Maximum product subarray in an array",4,DP,5
"Four matrices M1, M2, M3 and M4 of dimensions pxq, qxr, rxs and sxt respectively can be multiplied is several ways with different number of total scalar multiplications. For example, when multiplied as ((M1 X M2) X (M3 X M4)), the total number of multiplications is pqr + rst + prt. When multiplied as (((M1 X M2) X M3) X M4), the total number of scalar multiplications is pqr + prs + pst. If p = 10, q = 100, r = 20, s = 5 and t = 80, then the number of scalar multiplications needed is",2,DP,4
"Consider two strings A = ""qpqrr"" and B = ""pqprqrp"". Let x be the length of the longest common subsequence (not necessarily contiguous) between A and B and let y be the number of such longest common subsequences between A and B. Then what is the value of x + 10y",2,DP,3
"Let A1, A2, A3, and A4 be four matrices of dimensions 10 x 5, 5 x 20, 20 x 10, and 10 x 5, respectively. The minimum number of scalar multiplications required to find the product A1A2A3A4 using the basic matrix multiplication method is",2,DP,3
"Consider the following two sequences :
X = < B, C, D, C, A, B, C >, and 
Y = < C, A, D, B, C, B > 
The length of longest common subsequence of X and Y is :",2,DP,1
"Consider a sequence F00 defined as : F00(0) = 1, F00(1) = 1 F00(n) = 10 ∗ F00(n – 1) + 100 F00(n – 2) for n ≥ 2 Then what shall be the set of values of the sequence F00 ? Show your work",3,DP,4
"The following paradigm can be used to find the solution of the problem in minimum time: Given a set of non-negative integer, and a value K, determine if there is a subset of the given set with sum equal to K:
A) Divide and Conquer
B) Dynamic Programming
C) Greedy Algorithm
D) Branch and Bound",1,DP,2
"What happens when a top-down approach of dynamic programming is applied to any problem?
A) It increases both, the time complexity and the space complexity
B) It increases the space complexity and decreases the time complexity.
C) It increases the time complexity and decreases the space complexity
D) It decreases both, the time complexity and the space complexity",2,DP,2
"Which of the following is/are property/properties of a dynamic programming problem?
a) Optimal substructure
b) Overlapping subproblems
c) Greedy approach
d) Both optimal substructure and overlapping subproblems",1,DP,1
"If an optimal solution can be created for a problem by constructing optimal solutions for its subproblems, the problem possesses ____________ property.
a) Overlapping subproblems
b) Optimal substructure
c) Memoization
d) Greedy",1,DP,1
"If a problem can be broken into subproblems which are reused several times, the problem possesses which property.",1,DP,1
"If a problem can be solved by combining optimal solutions to non-overlapping problems, the strategy is called",1,DP,1
"When dynamic programming is applied to a problem, it takes far less time as compared to other methods that don’t take advantage of overlapping subproblems. Give reasoning for your answer
a) True
b) False",4,DP,3
"A greedy algorithm can be used to solve all the dynamic programming problems. Give examples.
a) True
b) False",4,DP,5
"In dynamic programming, the technique of storing the previously calculated values is called",2,DP,1
"Which of the following problems is NOT solved using dynamic programming? Which algorithm is used to solve that problem
a) 0/1 knapsack problem
b) Matrix chain multiplication problem
c) Edit distance problem
d) Fractional knapsack problem",2,DP,3
"Which of the following problems should be solved using dynamic programming?
a) Mergesort
b) Binary search
c) Longest common subsequence
d) Quicksort",1,DP,2
"The difference between Divide and Conquer and Dynamic Programming is:
a. Whether the subproblems overlap or not
b. The division of problems and combination of subproblems
c. The way we solve the base case
d. The depth of recurrence",1,DP,3
"Recurrence equations describing the work done during recursion are only useful for divide and
conquer algorithm analysis. Explain
a. True
b. False",2,DP,2
"A divide and conquer approach to solving a problem is useful when, and why?
a. We can break the problem into several subproblems that are similar to the original problems
but smaller in size
b. The subproblems are overlapping so we don’t have to solve them over and over again
c. The complexity is exponential to solve the entire problem",2,DP,4
"Dynamic programming does not work if the subproblems:
a. Share resources and thus are not independent
b. Cannot be divided in half
c. Overlap
d. Have to be divided too many times to fit into memory",1,DP,2
"Assume we are solving the rod‐cutting problem in the book using dynamic programming, and we have
a rod of length n that we decide to cut at location i. Write the pseudo code/algorithm in C++",6,DP,7
"You are given infinite coins of denominations 1, 3, 4. What is the total number of ways in which a sum of 7 can be achieved using these coins if the order of the coins is not important?",5,DP,4
There are 10 dice having 5 faces. The faces are numbered from 1 to 5. What is the number of ways in which a sum of 4 can be achieved? Show your work.,3,DP,5
Consider the two strings “”(empty string) and “abcd”. What is the edit distance between the two strings? Show your work,4,DP,6
What is the time complexity of the above dynamic programming implementation of the longest common subsequence problem where length of one string is “m” and the length of the other string is “n”?,2,DP,3
Longest palindromic subsequence is an example of which programming algorithm.,1,DP,1
"Consider the 3×3 matrix {{2,1,-3},{6,3,4},{-2,3,0}}. What is the sum of the elements of the maximum sum rectangle? Which programming paradigm is used for this.",3,DP,4
"Dynamic Programming algorithm solves each sub-problem just once and then saves its answer -
A) in a file
B) in a list
C) in a table",1,DP,2
"In dynamic programming, the output to stage n become the input to
A) stage n-1
B) stage n itself
C) stage n+1
D) stage n-2",1,DP,3
"Which of the following algorithms CANNOT be said to employ elements of dynamic programming? Which algorithm is used for that.
A) Bellman-Ford Algorithm
B) Dijkstra's Shortest Path
C) Floyd Warshall Algorithm
D) Bubble Sort Algorithm",2,DP,4
"Which statement is true? Explain
A) If a dynamic-programming problem satisfies the optimal-substructure property, then a locally optimal solution is globally optimal
B) If a greedy choice property satisfies the optimal-substructure property, then a locally optimal solution is globally optimal
C) Both of above
D) None of above",3,DP,4
"Ugly numbers are numbers whose only prime factors are 2, 3 or 5. Write the code for generating nth ugly number.",7,DP,7
Write the algorithm for generating nth fibonacci number using Dynamic Programming.,6,DP,6
"Given a value N, find the number of ways to make change for N cents, if we have infinite supply of each of S = { S1, S2, .. , SM } valued coins.",8,DP,8
"You are given weights and values of N items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. Note that we have only one quantity of each item.
In other words, given two integer arrays val[0..N-1] and wt[0..N-1] which represent values and weights associated with N items respectively. Also given an integer W which represents knapsack capacity, find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W. You cannot break an item, either pick the complete item or don’t pick it (0-1 property).",7,DP,9
"You are given N identical eggs and you have access to a K-floored building from 1 to K.

There exists a floor f where 0 <= f <= K such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break. There are few rules given below. 

An egg that survives a fall can be used again.
A broken egg must be discarded.
The effect of a fall is the same for all eggs.
If the egg doesn't break at a certain floor, it will not break at any floor below.
If the eggs breaks at a certain floor, it will break at any floor above.
Return the minimum number of moves that you need to determine with certainty what the value of f is.",8,DP,9
"Given N dice each with M faces, numbered from 1 to M, find the number of ways to get sum X. X is the summation of values on each face when all the dice are thrown.",3,DP,4
"Given an integer array arr of size N, the task is to divide it into two sets S1 and S2 such that the absolute difference between their sums is minimum and find the minimum difference",3,DP,5
"Given two sequences, find the length of longest subsequence present in both of them. Both the strings are of uppercase.",8,DP,7
Assembly line scheduling and Longest Common Subsequence problems are an example of __________,1,DP,1
"Consider the following two sequences :
X = < B, C, D, C, A, B, C >
and Y = < C, A, D, B, C, B >
The length of longest common subsequence of X and Y is :",1,DP,2
"Define R to be the maximum amount earned by cutting a rod of length n meters into one or
more pieces of integer length and selling them. For i > 0, let p[i] denotes the selling price of
a rod whose length is i meters. Consider the array of prices:
p[1] = 1, p[2] = 5, p[3] = 8, p[4] = 9, p[5] = 10, p[6] = 17, p[7] = 18
Which of the following statements is/are correct about R ?
Options:
1. R cannot be achieved by a solution consisting of three pieces.
2. R = 19
3. R = 18
4. R is achieved by three different solutions.",5,DP,6
Time complexity of 0/1 knapsack problem where n and w represents the number of items and capacity of knapsack respectively,2,DP,2
"Suppose you want to move from 0 to 100 on the number line. In each step, you either move
right by a unit distance or you take a shortcut. A shortcut is simply a pre-specified pair of
integers i, j with i < j. Given a shortcut i, j if you are at position i on the number line, you may
directly move to j. Suppose T(k) denotes the smallest number of steps needed to move from
k to 100. Suppose further that there is at most 1 shortcut involving any number, and in
particular from 9 there is a shortcut to 15. Let y and z be such that T(9) = 1 + min(T(y),T(z))
Then the value of product of yz is",3,DP,5
"There are 5 bags labelled 1 to 5. All the coins in a given bag have the same weight. Some
bags have coins of weight 10 gm, others have coins of weight 11 gm. I pick 1, 2, 4, 8, 16
coins respectively from bags 1 to 5. Their total weight comes out to 323 gm. Then the
product of the labels of the bags having 11 gm coins is. Show your work.",3,DP,5
"The Floyd-Warshall algorithm for all-pair shortest paths computation is based on.
Write down the basic algortihm for the same.
1. Greedy paradigm.
2. Divide-and-Conquer paradigm.
3. Dynamic Programming paradigm.
4. neither Greedy nor Divide-and-Conquer nor Dynamic Programming paradigm.",6,DP,8
"Consider the following matrices:
A: 3 x 2
B: 2 x 5
C: 5 x 4
D: 4 x 10
Total number of scalar multiplications needed if the matrices are multiplied in the optimal
way is:",2,DP,4
"Optimal paranthesization for the above question is
a) (A(B(CD)))
b) ((A(BC))D)
c) (A((BC)D))
d) ((AB)(CD))",2,DP,3
"Suppose a country has coins for denominations {1,3,7,10}. For making a change
using minimum number of coins for a total amount of 14, what is the solution provided by
greedy strategy? Explain",3,DP,4
"Which of the following strategy provides best solution to Change making problem? What's the time complexity.
a) Divide and Conquer
b) Greedy Strategy
c) Dynamic Programming
d) None of the above",2,DP,3
"Which of the following strategy provides best solution to compute the shortest path
between any given pair of nodes in a multistage graph?
a) Divide and Conquer
b) Greedy strategy
c) Dynamic Programming
d) None of the above",1,DP,2
"Say you are given 5 jobs as follows:
J1 requires 5 time units
J2 requires 2 time units
J3 requires 7 time units
J4 requires 1 time units
J5 requires 10 time units
What is the average completion time if the jobs are scheduled in the increasing order of
their ID’s?",2,DP,3
"Write sequence in which nodes of the graph (Fig. 1) have been traversed using BFS, starting 
 from vertex 'A'. To make a unique solution, assume that whenever you faced with a decision 
 of which node to pick from a set of nodes, pick the one whose label occurs earliest in the alphabet.",10,GRAPH,6
"Assuming the graph in Fig. 1 to be un-directed broadcast graph where vertex 'A' is the broadcast station. The task is to efficiently transfer a piece of information to all the listeners,
 i.e. vertices other than the broadcast station. The broadcast station sends a single copy of the broadcast message into the network. Each listener forwards the message to any single neighbor, 
 excluding the neighbor that just sent it the message. No listener is allowed to see more than one copy of any message, and all the listeners should see a copy of the message.
 Apply an efficient solution for the said problem on the broadcast graph shown in Fig. 1,
 illustrating all the intermediate steps.",5,GRAPH,7
C++ Program to Solve any Linear Equation in One Variable,8,GRAPH,5
C++ Program to Check the Connectivity of Undirected Graph Using BFS,8,GRAPH,5
C++ Program to Check the Connectivity of Directed Graph Using BFS,8,GRAPH,5
C++ Program to Check the Connectivity of Undirected Graph Using DFS,8,GRAPH,5
C++ Program to Check the Connectivity of Directed Graph Using DFS,8,GRAPH,5
C++ Program to Test Using DFS Whether a Directed Graph is Weakly Connected or Not,8,GRAPH,5
C++ Program to Check Whether a Graph is Strongly Connected or Not,8,GRAPH,5
C++ Program to Check if an UnDirected Graph is a Tree or Not Using DFS,8,GRAPH,5
C++ Program to Check if a Directed Graph is a Tree or Not Using DFS,8,GRAPH,5
C++ Program to Find the Connected Components of an UnDirected Graph,8,GRAPH,5
C++ Program to Create a Minimal Set of All Edges Whose Addition will Convert it to a Strongly Connected DAG,8,GRAPH,5
C++ Program to Find Strongly Connected Components in Graphs,8,GRAPH,5
C++ Program to Apply DFS to Perform the Topological Sorting of a Directed Acyclic Graph,8,GRAPH,5
C++ Program to Check Whether Topological Sorting can be Performed in a Graph,8,GRAPH,5
C++ Program to Create a Random Linear Extension for a DAG,8,GRAPH,5
C++ Program to Generate All the Possible Linear Extensions of a DAG,8,GRAPH,5
C++ Program to Remove the Edges in a Given Cyclic Graph such that its Linear Extension can be Found,8,GRAPH,5
C++ Program to Check Cycle in a Graph using Topological Sort,8,GRAPH,5
C++ Program for Topological Sorting in Graphs,8,GRAPH,5
C++ Program to Apply the Prim’s Algorithm to Find the Minimum Spanning Tree of a Graph,5,GRAPH,2
C++ Program to Apply the Kruskal’s Algorithm to Find the Minimum Spanning Tree of a Graph,5,GRAPH,2
C++ Program to Use Boruvka’s Algorithm to Find the Minimum Spanning Tree,5,GRAPH,2
C++ Program to Create a MST of a Set of Points Spread in Two Dimensions Using Delaunay Triangulation,5,GRAPH,2
C++ Program to Give an Efficient Algorithm to Compute the Second-Best Minimum Spanning Tree of G,5,GRAPH,2
C++ Program to Find MST(Minimum Spanning Tree) using Kruskal’s Algorithm,5,GRAPH,2
C++ Program to Find MST(Minimum Spanning Tree) using Prim’s Algorithm,5,GRAPH,2
C++ Program to Find the Shortest Path Between Two Vertices Using Dijkstra’s Algorithm,5,GRAPH,2
C++ Program to Find the Shortest Path from Source Vertex to All Other Vertices in Linear Time,5,GRAPH,2
C++ Program to Use the Bellman-Ford Algorithm to Find the Shortest Path Between Two Vertices Assuming that Negative Size Edges Exist in the Graph,5,GRAPH,2
C++ Program to Implement Shortest Path Algorithm for DAG Using Topological Sorting,5,GRAPH,2
C++ Program to Find Shortest Path Between All Vertices Using Floyd-Warshall’s Algorithm,5,GRAPH,2
C++ Program to Find the Shortest Cycle in a Graph,5,GRAPH,2
C++ Program to Implement Dijkstra’s Algorithm Using Queue,5,GRAPH,2
C++ Program to Implement Dijkstra’s Algorithm Using Priority_queue (Heap),5,GRAPH,2
C++ Program to Implement Dijkstra’s Algorithm Using Set,5,GRAPH,2
C++ Program to Implement Bellmanford Algorithm,5,GRAPH,2
C++ Program to Implement Floyd-Warshall Algorithm,5,GRAPH,2
C++ Program to Implement Johnson’s Algorithm,5,GRAPH,2
C++ Program to Find SSSP(Single Source Shortest Path) in DAG(Directed Acyclic Graphs),10,GRAPH,9
C++ Program to Find the Transitive Closure of a Given Graph G,10,GRAPH,9
C++ Program to Construct Transitive Closure Using Warshall’s Algorithm,10,GRAPH,9
C++ Program to Find Transitive Closure of a Graph,10,GRAPH,9
C++ Program to Solve a Matching Problem for a Given Specific Case,10,GRAPH,9
C++ Program to Rearrange Letters of a String such that no More than 1 Letters should Retain the Same Position,10,GRAPH,9
C++ Program to Implement the Hungarian Algorithm for Bipartite Matching,10,GRAPH,9
C++ Program to Implement the Edmond’s Algorithm for Maximum Cardinality Matching,10,GRAPH,9
C++ Program to Check Whether an Undirected Graph Contains a Eulerian Cycle,10,GRAPH,9
C++ Program to Check Whether an Undirected Graph Contains a Eulerian Path,10,GRAPH,9
C++ Program to Check Whether a Directed Graph Contains a Eulerian Cycle,10,GRAPH,9
C++ Program to Check Whether a Directed Graph Contains a Eulerian Path,10,GRAPH,9
C++ Program to Give an Implementation of the Traditional Chinese Postman Problem,10,GRAPH,9
C++ Program to Implement Euler Circuit Problem,10,GRAPH,9
C++ Program to Check Whether it is Weakly Connected or Strongly Connected for a Directed Graph,10,GRAPH,9
C++ Program to Check Whether a Weak Link i.e. Articulation Vertex Exists in a Graph or Check Whether G is Biconnected or Not,10,GRAPH,9
C++ Program to Implement an Algorithm to Find the Global min Cut in a Graph,4,GRAPH,9
C++ Program to Find the Edge Connectivity of a Graph,4,GRAPH,9
C++ Program to Find the Vertex Connectivity of a Graph,4,GRAPH,9
C++ Program to Check whether Graph is a Bipartite using 2 Color Algorithm,4,GRAPH,9
C++ Program to Check whether Graph is a Bipartite using BFS,4,GRAPH,9
C++ Program to Check whether Graph is a Bipartite using DFS,4,GRAPH,9
C++ Program to Find Maximum Number of Edge Disjoint Paths,4,GRAPH,9
C++ Program to Find Number of Articulation points in a Graph,4,GRAPH,9
"Run Dijkstraâ€™s algorithm on the directed graph (Fig. 4), starting at vertex . Show all the intermediate graphs in deriving the final shortest path tree. What is the order in which vertices get removed from the priority queue?",5,GRAPHS,9
"Write sequence in which nodes of the graph (Fig. 5) have been traversed using DFS and BFS, starting at vertex . To make a unique solution, assume that whenever you faced with a decision of which node to pick from a set of nodes, pick the node whose label occurs earliest in the alphabet.",5,GRAPHS,3
"Consider a hash table of size m=7 and a corresponding hash function h(k)=k mod m.Compute the locations to which the keys 99,59,26,50 and 58 are mapped using the following collision resolution techniques. a)Chaining b)Quadratic Probing",10,HASHING,3
"Consider a hash table of size and a corresponding hash function .
 
 Compute the locations to which the keys 14, 19, 13, 4, 5, 23, 6, and 15 are mapped using
 
 linear probing collision resolution technique. Draw the resultant hash table and determine the total number of collisions occurs.",5,HASHING,3
What is Hash Table?,1,HASHING,2
What is Hashing?,1,HASHING,2
Explain what is Hash Value?,2,HASHING,2
What is the space complexity of a Hash Table?,2,HASHING,2
Define what is a Hash Function?,2,HASHING,2
What is the difference between Hashing and Hash Tables?,4,HASHING,2
Provide a simple example of Hash Function,2,HASHING,2
What is the significance of load factor of a Hash Table?,4,HASHING,2
"What does ""bucket entries"" mean in the context of a hashtable?",2,HASHING,2
What is complexity of Hash Table?,4,HASHING,5
What is Hash Collision?,2,HASHING,2
Explain in simple terms how Hash Tables are implemented?,4,HASHING,5
What is hashing algorithm? How it works?,6,HASHING,5
How can Hash Functions be used to perform lookups?,4,HASHING,5
Explain some technics to handle collision in Hash Tables,6,HASHING,9
What are some main advantages of Tries over Hash Tables,4,HASHING,5
What is the difference between HashMap and HashTable?,4,HASHING,5
"Why all hash functions are ""broken""? Explain.",4,HASHING,9
"Draw a hash table with open addressing and a size of 9. Use the hash function ""k%9"". Insert the keys: 5, 29, 20, 0, 27 and 18 into your table (in that order).",6,HASHING,9
"Suppose you are building an open address hash table with double hashing. The hash table capacity is n, so that the valid hash table indexes range from 0 to n. Fill in the blanks:
In order to ensure that every array position is examined, the value returned by the second hash function must be ________________________ with respect to n.
One way to ensure this good behavior is to make n be _______________, and have the return value of the second hash function range from _________ to _________ (including the end points).",6,HASHING,9
"Draw a hash table with chaining and a size of 9. Use the hash function ""k%9"" to insert the keys 5, 29, 20, 0, and 18 into your table.",6,HASHING,9
Suppose that an open-address hash table has a capacity of 811 and it contains 81 elements. What is the table's load factor?,10,HASHING,9
"Suppose you have a hash table of size 19, the keys are words, and the hash map is defined as follows: Each letter is assigned a number according to its position in the alphabet, i.e. a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 and the primary hash function is “x modulo 19”, where x is the number corresponding to the first letter of the word. Why is this hash function not ideal? Suppose instead you have a hash table of size 13 and the primary hash function is “x modulo 13”, where x is the sum of the numbers corresponding to all the letters in the key word. Insert the following list of words into an initially empty hash table using linear probing: [computer, science, in, birmingham, dates, back, to, the, sixties] What is the load factor of the resulting table, and how many collisions occurred? What is the effort (i.e. number of comparisons) involved in checking whether each of the following words are in the hash table: teaching, research, admin? Show what the resulting hash table would look like if direct chaining had been used rather than linear probing. Now what is the effort (i.e. number of comparisons, not including the processing of NULL pointers) involved in checking whether each of the following words are in the hash table: teaching, research, admin?",10,HASHING,9
7,10,HASHING,9
"Given the efficiency of hash tables and their techniques for dealing with hash collisions, one might expect them to provide a more efficient method of detecting duplicate items than the algorithms in Questions 5 and 7 of Assignment 3. Outline in words how a hash table using direct chaining could be used to detect duplicates in a list of items.",6,HASHING,9
"Given the following items to insert into a hash table of size 10, show the hash table after all items have been inserted. • The items are to be inserted starting from the top of the list and working down. • The primary hash function is key modulus table size. • The collision resolution strategy is double hashing. • The secondary hash function is key div table size, where div is integer division (that is, division discarding the remainder).",6,HASHING,9
Describe and explain Double Hashing,6,HASHING,5
"A. Given the following items to insert into a hash table that uses linear hashing, show the hash table during and after all items have been inserted. (That is, rather than erasing when things change, cross them out as they change so that I can still see them.) • The items are to be inserted starting from the top of the list and working down. • The collision resolution strategy is separate chaining.",6,HASHING,5
WAP to Find pair with given sum in an array,6,HASHING,5
WAP to Check if subarray with 0 sum is exists or not,6,HASHING,2
WAP to Print all sub-arrays with 0 sum,6,HASHING,2
WAP to Find longest subsequence formed by consecutive integers,6,HASHING,5
WAP to Find duplicates within given range k in an array,6,HASHING,5
WAP to Find duplicate element in a limited range array,6,HASHING,5
WAP to Replace each element of an array by its corresponding rank,6,HASHING,5
WAP to Print all sub-arrays of an array having distinct elements,6,HASHING,5
WAP to Find pairs with given difference k in an array,6,HASHING,9
WAP to Detect if a List is Cyclic using Hash Table,6,HASHING,9
WAP to Count distinct absolute values in a sorted array,6,HASHING,5
WAP to Find largest sub-array formed by consecutive integers,6,HASHING,5
WAP to Check if an array can be divided into pairs whose sum is divisible by k,6,HASHING,5
WAP to Implement our Own Hash Table with Separate Chaining,6,HASHING,9
WAP to Palindrome Substring Queries,6,HASHING,5
WAP to Find Probability that a Person is Alive after Taking N steps on an Island,6,HASHING,9
WAP to Find Duplicate Rows in a Binary Matrix,6,HASHING,5
WAP to check for Isomorphic Strings,6,HASHING,9
WAP to Determine if two strings are anagram or not,6,HASHING,5
WAP to Check if repeated subsequence is present in the string or not,6,HASHING,5
WAP to Find Index of Maximum Occurring Element with Equal Probability,6,HASHING,9
WAP to Find Minimum Index of Repeating Element in an Array,6,HASHING,9
WAP to Construct the longest palindrome by shuffling or deleting characters from a string,6,HASHING,9
Heapsort algorithm is executed on an array to arrange its elements in ascending order. What would be the contents of array after three passes of the heap sort algorithm (show all the intermediate steps)?,5,HEAP,4
"Execute the algorithm given in Fig. 5 on an array A[1..15] = [0, 70, 74, 52, 86, 84, 62, 90, 56, 91, (10) 75, 94, 89, 58, 78, 88]. Write the final contents of an array A[ ] and stack S1.
//Q1 and Q2 are empty Queues, S1 and S2 are empty Stacks, an Integer i is initialized to 1, j is an //Integer, and flag is a Boolean.
Build_Min_Heap(A); 17. if (A.heap_size) 18. { Q1.enqueue(A[i]); 19.
while (!Q1.empty() || !Q2.empty()) 20. { flag = !true; 21. while (!Q1.empty()) 22.
S2.push(A[Right(i)]); }
Q1.dequeue(); }
flag = true;
while (!Q2.empty())
{
i++; 23. if(!flag) 24. { S1.push(Q1.front()); 25.
if(!S2.empty()) 26. S1.push(S2.top()); 27. flag = !flag ? !flag : flag; } 28. if (Left(i) <= A.heap_size) 29. Q2.enqueue(A[Left(i)]); 30. if (Right(i) <= A.heap_size) 31. { Q2.enqueue(A[Right(i)]); 32.
{
i++;
if(flag)
{ S1.push(Q2.front());
S1.push(S2.top());
flag = !flag ? !flag : !flag; } if (Left(i) <= A.heap_size)
Q1.enqueue(A[Left(i)]);
if (Right(i) <= A.heap_size)
{ Q1.enqueue(A[Right(i)]);
S2.push(A[Right(i)]);
}
Q2.dequeue(); } } }",10,HEAP,9
"Min Heap and Max Heap Implementation — C++, Java",6,HEAP,5
Check if an array represents a min-heap or not,6,HEAP,5
Convert max heap to min heap in linear time,6,HEAP,5
Find k’th largest element in an array,6,HEAP,5
Sort a k-sorted array,6,HEAP,5
Merge `M` sorted lists of variable length,6,HEAP,5
Find k’th smallest element in an array,6,HEAP,5
Find the smallest range with at least one element from each of the given lists,6,HEAP,5
Merge `M` sorted lists each containing `N` elements,6,HEAP,5
Find first `k` non-repeating characters in a string in a single traversal,6,HEAP,5
Connect `n` ropes with minimal cost,6,HEAP,5
Return k’th largest element in a stream,6,HEAP,5
Huffman Coding Compression Algorithm,6,HEAP,5
Replace each array element by its corresponding rank,6,HEAP,5
Single-Source Shortest Paths — Dijkstra’s Algorithm,6,HEAP,5
Construct a Cartesian tree from an inorder traversal,6,HEAP,5
"Implementation of Treap Data Structure (Insert, Search, and Delete)",6,HEAP,5
Heap Sort Algorithm,6,HEAP,5
Introsort Algorithm — Overview and C++ Implementation,6,HEAP,5
External Merge Sort Algorithm,6,HEAP,5
Efficiently merge `k` sorted linked lists,6,HEAP,5
Check if a binary tree is a min-heap or not,6,HEAP,5
Convert a Binary Search Tree into a Min Heap,6,HEAP,5
Find first `k` maximum occurring words in a given set of strings,6,HEAP,5
"The number of possible min-heaps containing each value from {1, 2, 3, 4, 5, 6, 7}exactly once is _____.",3,HEAP,2
"An operator delete (i) for a binary heap data structure is to be designed to delete the item in the ii-th node. Assume that the heap is implemented in an array and i refers to the i-th index of the array. If the heap tree has depth d (number of edges on the path from the root to the farthest leaf), tthen what is the time complexity to re-fix the heap efficiently after the removal of the element?",3,HEAP,2
"A complete binary min-heap is made by including each integer in [1;1023] exactly once. The depth of a node in the heap is the length of the path from the root of the heap to that node. Thus, the root is at depth 0. The maximum depth at which integer 9 can appear is _________.",3,HEAP,2
"Consider a max heap, represented by the array: 40, 30, 20, 10, 15, 16, 17, 8, 4.
Now consider that a value 35 is inserted into this heap. After insertion, the new heap is
Array Index 1 2 3 4 5 6 7 8 9
Value 40 30 20 10 15 16 17 8 4",3,HEAP,2
Consider a complete binary tree where the left and the right subtrees of the root are max-heaps. The lower bound for the number operations to convert the tree to a heap is,3,HEAP,2
"Consider the following array of elements
<89, 19, 50, 17, 12, 15, 2, 5, 7, 11, 6, 9, 100>
The minimum number of interchanges needed to convert it into a max-heap is",3,HEAP,2
"A priority queue is implemented as a Max-Heap. Initially, it has 5 elements. The level-order traversal of the heap is: 10, 8, 5, 3, 2. Two new elements 1 and 7 are inserted into the heap in that order. The level-order traversal of the heap after the insertion of the elements is:",3,HEAP,2
A max-heap is a heap where the value of each parent is greater than or equal to the value of its children. Which of the following is a max-heap?,3,HEAP,2
"Consider a binary max-heap implemented using an array.

Which one of the following array represents a binary max-heap?",3,HEAP,2
"Consider a binary max-heap implemented using an array.

What is the content of the array after two delete operations on the correct answer to the previous question?",3,HEAP,2
"Consider the process of inserting an element into a Max Heap, where the Max Heap is represented by an array. Suppose we perform a binary search on the path from the new leaf to the root to find the position for the newly inserted element, the number of comparisons performed is:",3,HEAP,2
What is Heap?,5,HEAP,2
What is Priority Queue?,5,HEAP,2
How is Binary Heap usually implemented?,5,HEAP,2
Insert item into the Heap. Explain your actions.,5,HEAP,2
What is Binary Heap?,5,HEAP,2
Compare Heaps vs Arrays to implement Priority Queue,5,HEAP,2
Explain how Heap Sort works,5,HEAP,2
Name some ways to implement Priority Queue,5,HEAP,2
What is the advantage of Heaps over Sorted Arrays?,5,HEAP,2
When would you want to use a Heap?,5,HEAP,2
Explain how to find 100 largest numbers out of an array of 1 billion numbers,5,HEAP,2
What is the difference between Heap and Red-Black Tree?,5,HEAP,2
"Given a singly linked list (LL1) having 2*n nodes (n â‰¥ 1).
 Write an algorithm/pseudo-code to create two linked lists (LL2 and LL3) each having n â€“ 1 nodes. LL2 and LL3 are respectively formed by adding values of consecutive odd-positioned and even-positioned nodes in LL1. Note: Position of first node in LL1 is one.
 Write an algorithm/pseudo-code to combine LL1 with LL2 and LL3 (formed in Q8.(a)). Nodes of LL2 and LL3 are to be placed at alternative positions in first-half and last-half of LL1. Create a new node MID that contains sum of first and last node values of LL1 and place it in the middle of the updated LL1 as shown in Fig. 5. Note: Creation of new node is not allowed, only reposition the existing nodes. Example: In continuation with example of Q8.(a)",6,LINKED LIST,8
"Write a pseudo-code to implement Round Robin CPU Scheduling using singly circular linked list assuming processes may have different arrival as well as burst times. Round Robin is a pre-emptive scheduling algorithm in which CPU is assigned to a process on the basis of FCFS for a fixed amount of time known as 'time quantum'. After time quantum expires, the running process is pre-empted and the processor is assigned to the next arrived process. Note: ï‚· tq represents time quantum, SCLL is a singly circular linked list maintaining list of processes which are being executed currently. LL is a simple linked list maintaining list of processes (in FCFS order) which are freshly arrived and yet to enter SCLL. ï‚· At the end of each tq, all the processes are deleted from LL and are inserted in the same order in SCLL. Similarly, when the burst time reaches zero the corresponding process is finally deleted from SCLL. ï‚· Memory should be allocated to a process only once when it arrives freshly. Also assume that insertion is happening automatically in LL, so there is no need to specify itâ€™s corresponding pseudo-code",4,LINKED LIST,9
Define Linked List,2,LINKED LIST,2
Name some advantages of Linked List,2,LINKED LIST,2
What is a cycle/loop in the singly-linked list?,1,LINKED LIST,2
What are some types of Linked List?,4,LINKED LIST,5
What is time complexity of Linked List operations?,1,LINKED LIST,2
Name some disadvantages of Linked Lists?,2,LINKED LIST,2
Under what circumstances are Linked Lists useful?,2,LINKED LIST,2
How to implement Linked List Using Stack?,5,LINKED LIST,9
Why does linked list delete and insert operation have complexity of O(1)?,2,LINKED LIST,2
When to use a Linked List over an Array/Array List?,3,LINKED LIST,2
Compare Array based vs Linked List stack implementations,6,LINKED LIST,9
When is a loop in a Linked List useful?,3,LINKED LIST,2
When should I use a List vs a LinkedList?,4,LINKED LIST,5
How would you compare Dynamic Arrays with Linked Lists and vice versa?,4,LINKED LIST,5
Explain Floyd's Cycle Detect Algoritm,6,LINKED LIST,9
Why is Merge sort preferred over Quick sort for sorting Linked Lists?,4,LINKED LIST,5
How would you traverse a Linked List in O(n1/2)?,6,LINKED LIST,9
How to apply Binary Search O(log n) on a sorted Linked List?,6,LINKED LIST,9
When is doubly linked list more efficient than singly linked list?,4,LINKED LIST,5
How is it possible to do Binary Search on a Doubly-Linked List in O(n) time?,4,LINKED LIST,5
Why would you ever do Binary Search on a Doubly-Linked list?,4,LINKED LIST,5
What is Doubly Linked List? Write an algorithm to insert and delete a node in Doubly Linked List.,10,LINKED LIST,9
What is Circular Linked List? State the advantages and disadvantages of Circular Link List Over Doubly Linked List and Singly Linked List. Also write advantages of Linked List over an Array,10,LINKED LIST,9
How to reverse a singly Linked List using only two pointers?,6,LINKED LIST,5
What is complexity of push and pop for a Stack implemented using a LinkedList?,4,LINKED LIST,2
WAP to Insert an item in a sorted Linked List maintaining order,6,LINKED LIST,2
WAP to Convert a Singly Linked List to Circular Linked List,6,LINKED LIST,2
Wap to convert a Single Linked List to a Double Linked List,6,LINKED LIST,5
WAP to implement Floyd's Cycle Detect Algorithm: Remove Cycle (Loop) from a Linked List,6,LINKED LIST,9
WAP to implement Double Linked List from Stack with min complexity,6,LINKED LIST,9
"WAP to split the Linked List into k consecutive linked list ""parts""",6,LINKED LIST,5
WAP to Remove duplicates from an unsorted Linked List,6,LINKED LIST,5
WAP to find Sum of two numbers represented as Linked Lists,6,LINKED LIST,5
WAP to Find similar elements from two Linked Lists and return the result as a Linked List,6,LINKED LIST,2
WAP to find Nth element from the end of a singly Linked List?,6,LINKED LIST,2
WAP to Find Merge (Intersection) Point of Two Linked Lists,6,LINKED LIST,5
WAP to recursively reverse a Linked List,6,LINKED LIST,5
Define P and NP Complete class of problems. Give at-least one example for each class.,4,P and NP,2
What is P and NP?,5,P and NP,2
"What are the differences between NP, NP-Complete and NP-9?",6,P and NP,5
Draw the conditions P=NP and P!=NP,4,P and NP,5
"If P = NP, why does P = NP = NP-Complete?",2,P and NP,2
Is this optimization problem on a bipartite graph NP-9?,5,P and NP,9
Is it possible to find a Eulerian path or Eulerian cycle in polynomial time in a directed multigraph with self loops?,4,P and NP,5
What are the differences and/or similarities between problem reduction and transformation?,6,P and NP,9
Explain why NP-complete \cap P = \Phi if P != NP,2,P and NP,2
"Classify whether following undirected graphs are NP or P
α : Given G(V, E), does G have an independent set of size | V | - 4?
β : Given G(V, E), does G have an independent set of size 5?",6,P and NP,9
"Ram and Shyam have been asked to show that a certain problem Π is NP-complete. Ram shows a polynomial time reduction from the 3-SAT problem to Π, and Shyam shows a polynomial time reduction from Π to 3-SAT. Prove that Π is NP-Complete",4,P and NP,5
If: a. Language is NP-complete b. Language is in NP c. is polynomial time reducible to A A B B Then Prove: B is NP-complete,6,P and NP,9
What's the relationship between PP and NP?,3,P and NP,5
How to prove given problem is NP-complete or not? Explain with Example,5,P and NP,9
"Suppose a polynomial time algorithm is discovered that correctly computes the largest clique in a given graph. In this scenario, draw the Venn diagram of the complexity classes P, NP and NP Complete (NPC)?",4,P and NP,9
Let S be an NP-complete problem and Q and R be two other problems not known to be in NP. Q is polynomial time reducible to S and S is polynomial-time reducible to R. Prove that R is NP-9,3,P and NP,5
"If the elements “A”, “B”, “C” and “D” are placed in a queue and are deleted one at a time, in what order will they be removed?",5,QUEUE,2
"A normal queue, if implemented using an array of size MAX_SIZE, gets full when? Expalin your answer by implementing",5,QUEUE,5
"How many stacks are needed to implement a queue. Consider the situation where no other data structure like arrays, linked list is available to you.",2,QUEUE,2
"How many queues are needed to implement a stack. Consider the situation where no other data structure like arrays, linked list is available to you.",2,QUEUE,2
A priority queue can efficiently implemented using which of the following data structures? Assume that the number of insert and peek (operation to see the current highest priority item) and extraction (remove the highest priority item) operations are almost same.,3,QUEUE,2
"Suppose a circular queue of capacity (n – 1) elements is implemented with an array of n elements. Assume that the insertion and deletion operation are carried out using REAR and FRONT as array index variables, respectively. Initially, REAR = FRONT = 0. The conditions to detect queue full and queue empty are",3,QUEUE,2
"A Priority-Queue is implemented as a Max-Heap. Initially, it has 5 elements. The level-order traversal of the heap is given below: 10, 8, 5, 3, 2 Two new elements ”1‘ and ”7‘ are inserted in the heap in that order. The level-order traversal of the heap after the insertion of the elements is:",3,QUEUE,2
"An implementation of a queue Q, using two stacks S1 and S2, is given below:
void insert(Q, x) {
push (S1, x);
}
void delete(Q){
if(stack-empty(S2)) then if(stack-empty(S1)) then {
print(“Q is empty”);
return;
}
else while (!(stack-empty(S1))){
x=pop(S1);
push(S2,x);
}
x=pop(S2);
}
Run on IDE
Let n insert and m (<=n) delete operations be performed in an arbitrary order on an empty queue Q. Let x and y be the number of push and pop operations performed respectively in the process. Which one of the following is true for all m and n?",5,QUEUE,9
"Consider the following operation along with Enqueue and Dequeue operations on queues, where k is a global parameter.
MultiDequeue(Q){
m = k
while (Q is not empty and m > 0) {
Dequeue(Q)
m = m - 1
}
}
What is the worst case time complexity of a sequence of n MultiDequeue() operations on an initially empty queue? (GATE CS 2013) (A) \Theta(n) (B) \Theta(n + k) (C) \Theta(nk) (D) \Theta(n^2)",5,QUEUE,9
Illustrate stepwise execution of the Heapsort algorithm on an array to arrange its elements in descending order.,10,SORTING,5
"Write a complete algorithm/pseudo-code to implement any one of the following:
 
 Quicksort sorting algorithm OR Mergesort sorting algorithm",3,SORTING,3
"A Radix Sort algorithm utilizing Counting Sort as an intermediate stable sorting algorithm is to be applied on the contents of array A to arrange them in increasing order. Let COUNT [0..9] be the array that counting sort uses to store the frequency values during intermediate steps.Illustrate step wise execution of counting sort, i.e. list the contents of array
 
 COUNT, for each of the iterations of Radix sort (starting from LSD). Also show
 
 the contents of array A across all the iterations of Radix sort.",5,SORTING,8
"Consider the worst case of a merge sort algorithm takes 24 seconds for an input of size 256. 
 Calculate the approximate maximum input size of a problem that can be solved in 2 minutes?",3,SORTING,4
What are the most common types of sorting algorithms? What is their time complexity?,6,SORTING,2
Note down the bubble sort algorithm,5,SORTING,3
"Write an algorithm to sort the specified array int[] input = { 4, 1, 2, 7, 10, 1, 2, 4, 4, 7, 1, 2, 1, 10, 1, 2, 4, 1, 2, 7, 10, 1, 2};",4,SORTING,4
Remove duplicates from a sorted list,3,SORTING,3
Find the element’s first and last positions in a sorted array,1,SORTING,1
Explain how Insertion Sort works,6,SORTING,7
Explain what is ideal Sorting algorithm?,3,SORTING,4
How would you optimise Bubble Sort?,2,SORTING,4
Insert an item in a sorted Linked List maintaining order,5,SORTING,2
"What is meant by to ""Sort in Place""?",2,SORTING,2
Explain how Heap Sort works,6,SORTING,6
Explain how Merge Sort works,7,SORTING,5
Sort a Stack using Recursion,6,SORTING,8
When is Quicksort better than Mergesort?,2,SORTING,3
What's the difference between External vs Internal sorting?,2,SORTING,2
Explain how Radix Sort works,5,SORTING,8
Explain how to find 100 largest numbers out of an array of 1 billion numbers,4,SORTING,6
How do you implement a counting sort algorithm?,6,SORTING,7
How do you swap two numbers without using the third variable?,2,SORTING,1
Write the algorithm for Sieve of Eratosthenes Algorithms for Prime Number?,7,SORTING,8
Difference between a stable and unstable sorting algorithm?,5,SORTING,4
"Sort an array of 0’s, 1’s, and 2’s.",3,SORTING,3
Find a pair with the given sum in an array,5,SORTING,6
Sort an array in one swap whose two elements are swapped,4,SORTING,6
What are the types of sorting available in C++?,1,SORTING,1
What is the basic idea of shell sort?,2,SORTING,5
Define radix sort?,2,SORTING,4
Advantage of quick sort?,2,SORTING,3
Define quick sort?,2,SORTING,2
Define insertion sort?,2,SORTING,2
Define selection sort?,2,SORTING,2
Write the pseudo code for selection sort,6,SORTING,7
Write the algorithm for merge sort,6,SORTING,7
"Which of the following is not a stable sorting algorithm in its typical implementation. Explain 
a) Insertion Sort
b) Merge Sort
c) Quick Sort
d) Bubble Sort",2,SORTING,2
"Consider a situation where swap operation is very costly. Which of the following sorting algorithms should be preferred so that the number of swap operations are minimized in general? Explain A)Heap Sort
B)Selection Sort
C)Insertion Sort
D)Merge Sort",2,SORTING,3
The following best describes which algorithm? The elements are compared and swapped if the first is found to be greater than the second. Explain,2,SORTING,4
"The heap sort algorithm begins by converting the list into a heap, then sorting.
A.True
B.False",1,SORTING,1
Which sorting algorithm makes one swap per pass (possibly swapping an element with itself)?,2,SORTING,2
Which sorting algorithm may make multiple swaps per pass?,2,SORTING,2
"The following lists represent 3 passes of a sorting algorithm. Which algorithm is being used to sort the list?
4 8 6 2 5 7 4 8 6 2 5 7 4 6 8 2 5 7",2,SORTING,3
"We are sorting the following list in ascending order:
1 4 2 9 3 8 5
What does the list look like after one pass of the bubble sort algorithm.",1,SORTING,3
"We are sorting the following list in ascending order:
1 4 2 9 3 8 5
What does the list look like after one pass of the insertion sort algorithm.",2,SORTING,4
"What are the key advantages of Insertion Sort, Quicksort, Heapsort and Mergesort? Discuss best, average, and worst case time and memory complexity.",4,SORTING,6
"If all the elements in an input array is equal for example {1,1,1,1,1,1}, What would be the running time of the Insertion Algorithm?",2,SORTING,3
What operation does the Insertion Sort use to move numbers from the unsorted section to the sorted section of the list?,1,SORTING,3
"If the given input array is sorted or nearly sorted, which of the following algorithm gives the best performance? Explain 
a) Insertion sort
b) Selection sort
c) Quick sort
d) Merge sort",2,SORTING,4
"Which of the following algorithm pays the least attention to the ordering of the elements in the input list? Explain 
a) Insertion sort
b) Selection sort
c) Quick sort
d) None",2,SORTING,3
"Given a number of elements in the range [0….n3]. which of the following sorting algorithms can sort them in O(n) time? Explain 
a) Counting sort
b) Bucket sort
c) Radix sort
d) Quick sort",2,SORTING,2
"The radix sort does not work correctly if each individual digit is sorted using
a) Insertion sort
b) Counting sort
c) Selection sort
d) Bubble sort",1,SORTING,1
"Which of the following algorithm design technique is used in the quick sort algorithm and when?
a) Dynamic programming
b) Backtracking
c) Divide-and-conquer
d) Greedy method",2,SORTING,3
"What would be the worst case time complexity of the insertion sort algorithm, if the inputs are restricted to permutation of 1…..n with at most n inversion? Explain
a) θ (n2)
b) θ (nlogn)
c) θ (n1.5)
d) θ (n)",3,SORTING,5
"In a binary max heap containing n numbers, the smallest element can be found in time
a) θ (n)
b) θ (logn)
c) θ (loglogn)
d) θ (1)",2,SORTING,1
"Which of the following sorting procedure is the slowest ?
a) Quick sort
b) Heap sort
c) Shell sort
d) Bubble sort",1,SORTING,1
"A sort which compares adjacent elements in a list and switches where necessary is
a) insertion sort
b) heap sort
c) quick sort
d) bubble sort",1,SORTING,1
A sort which iteratively passes through a list to exchange the first element with any element less than it and then repeats with a new first element is called,1,SORTING,1
"The number of swappings needed to sort the numbers 8, 22, 7, 9, 31, 19, 5, 13 in ascending order, using bubble sort is.",4,SORTING,5
"The way a card game player arranges his cards as he picks them one by one can be compared to. Explain your answer.
a) Quick sort
b) Merge sort
c) Insertion sort
d) Bubble sort",3,SORTING,4
Which sorting method is the best when the list is already sorted. Do a dry run to defend your answer.,4,SORTING,5
"As part of the maintenance work, you are entrusted with the work of rearranging the library books in a shelf in proper order, at the end of each day. The ideal sorting choice will be ? and why?",4,SORTING,4
"Perform the following operations using stacks. Show contents of the stack at each intermediate step.
 (a) Convert the given infix expression into an equivalent postfix expression.
 A â€“ B â€“ C * (D + E / F â€“ G) â€“ H
 (b) Compute the value of the postfix expression obtained in Q1.(a) for
 A = 45, B = F = 2, C = 5, D = 8, E = 6, G = 4, and H = 3.",4,STACK,6
Convert the given infix expression into an equivalent postfix expression using stacks. Show contents of the stack at each intermediate step. Use the precedence table as shown in Table 1. (A $ B + C) # (K + L â€“ M * N + O ^ P * W / U),3,STACK,5
"Let the letters S, E, A, T, B, L has to be pushed on to an empty stack of characters in the order they appear from left to right. Consider that the output of pop() operation is appended in an initially empty output string. Determine the sequence in which push() and pop() operations should be called such that the contents in the output string should be STABLE.",1,STACK,3
"Let S be an empty stack and Q be a queue with contents as shown in Fig. 1. isEmpty(Q) or isEmpty(S) returns true if Q or S is empty, else returns false. top(S) returns the character at the top of S without removing it from S. Execute the code snippet given in Fig. 2 and answer the following questions. (a) Give the contents of S after each execution of the while loop within main(). (b) Observe the output obtained in Q5. (a) and clearly state the purpose(s) of designing it.",3,STACK,5
"Convert the infix expression into an equivalent postfix expression using stacks. 
 Show contents of the stack at each intermediate step.",7,STACK,5
"Stack A has the entries a, b, c, d (with a on the top). An entry popped out of stack A can be printed immediately or pushed to stack B. An entry popped out of stack B can
only be printed. In this arrangement, how many permutations of a, b, c, d which are not
possible and list them.",3,STACK,5
Infix to Postfix Conversion using Stack,5,STACK,2
Prefix to Infix Conversion,5,STACK,2
Prefix to Postfix Conversion,5,STACK,2
Postfix to Prefix Conversion,5,STACK,2
Postfix to Infix,5,STACK,2
Convert Infix To Prefix Notation,5,STACK,2
Reverse a stack using recursion,5,STACK,5
Sort a stack using recursion,5,STACK,5
Sort a stack using a temporary stack,5,STACK,5
Reverse a stack without using extra space in O(n),5,STACK,5
Delete middle element of a stack,5,STACK,5
Sorting array using Stacks,5,STACK,5
Evaluation of Postfix Expression,5,STACK,5
Arithmetic Expression Evalution,5,STACK,5
Solve Tower of Hanoi,5,STACK,5
"Perform the following operations using stacks. Show contents of the stack at each intermediate step.
(a) Convert the given infix expression into an equivalent postfix expression.
A – B – C * (D + E / F – G) – H
(b) Compute the value of the postfix expression obtained in Q1.(a) for
A = 45, B = F = 2, C = 5, D = 8, E = 6, G = 4, and H = 3.",6,STACK,9
Program for Tower of Hanoi,5,STACK,9
"What is the policy, followed in Stack implementation? Stack is a linear or non-
linear data structure.",2,STACK,5
Give two situations/applications where Stack data structure will be preferred to use.,2,STACK,2
"We want to implement push and pop operations on Stack with the help of a linked 4
list. Give algorithms for these operations; taking start as the starting address of list,
start —) info as the data part of node and start -4 next as the pointer to next node.",4,STACK,9
"Following post-fix expression is given. Give a step-by-step process to evaluate this
(8)
expression using stack. Here, "","" has been used to separate the operands/operators.
Expression: 12 , 4 , 5 , + , 20 , * , 3 , - , 20, * ,",8,STACK,5
Differentiate between: stack and queue,1,STACK,2
Which data structure can be best applied for the above mentioned problem? stack,2,STACK,2
"Q3.Convert the following infix expressions into its equivalent postfix expression using stack;
A) A * (B*D)/E-F*(G+H/K)
B) Evaluate the result obtained in part a with given values: A=9,B=4,D=E=F=K=2, G=5,H=6",3,STACK,5
"Suppose the numbers 0, I, 2, ..., 9 were pushed onto a stack in that order, but that pops occurred at
random points between the various pushes. Each pop will also print the deleted element.
A) List out the valid sequence of push and pop operation to achieve the output :
3, 2, 6, 5, 7, 4, 1, 0, 9, 8.
B) Explain why it is not possible that 3, 2, 6, 4, 7, 5, 1, 0, 9, 8 is a valid sequence in which the values
could have been popped off the stack",3,STACK,9
"Convert following infix expression into postfix expression using stack as an intermediate data structure. Also,
evaluate the resulting postfix expression using stack.

Infix Expression: S * 4 ♦ (30 —50/2)",3,STACK,5
"Entries in a stack are “ordered”. What is the meaning of this statement?
a) A collection of stacks is sortable
b) Stack entries may be compared with the ‘<‘ operation
c) The entries are stored in a linked list
d) There is a Sequential entry that is one by one. explain this",3,STACK,5
"Which of the following is not the application of stack?
a) A parentheses balancing program
b) Tracking of local variables at run time
c) Compiler Syntax Analyzer
d) Data Transfer between two asynchronous process.. explain why",,STACK,5
Consider the usual algorithm for determining whether a sequence of parentheses is balanced. The maximum number of parentheses that appear on the stack AT ANY ONE TIME when the algorithm analyzes: (()(())(()))?,3,STACK,5
Consider the usual algorithm for determining whether a sequence of parentheses is balanced. Suppose that you run the algorithm on a sequence that contains 2 left parentheses and 3 right parentheses (in some order). The maximum number of parentheses that appear on the stack AT ANY ONE TIME during the computation?,3,STACK,5
What is the value of the postfix expression 6 3 2 4 + – *?,2,STACK,2
Here is an infix expression: 4 + 3*(6*3-12). Suppose that we are using the usual stack algorithm to convert the expression from infix to postfix notation. The maximum number of symbols that will appear on the stack AT ONE TIME during the conversion of this expression?,3,STACK,2
The postfix form of the expression (A+ B)*(C*D- E)*F / G is,2,STACK,2
The postfix form of A*B+C/D is?,1,STACK,2
The prefix form of A-B/ (C * D ⋀ E) is,1,STACK,2
"What is the result of the following operation
Top (Push (S, X))",2,STACK,5
The prefix form of an infix expression p + q - r * t is?,4,STACK,5
"The result of evaluating the postfix expression 5, 4, 6, +, *, 4, 9, 3, /, +, * is?",2,STACK,5
"Convert the following infix expressions into its equivalent postfix expressions
(A + B ⋀D)/(E - F)+G",2,STACK,2
"Convert the following Infix expression to Postfix form using a stack

x + y * z + (p * q + r) * s, Follow usual precedence rule and assume that the expression is legal.",3,STACK,2
Consider the usual implementation of parentheses balancing program using stack. What is the maximum number of parentheses that will appear on stack at any instance of time during the analysis of ( ( ) ( ( ) ) ( ( ) ) )?,2,STACK,5
"If the elements “A”, “B”, “C” and “D” are placed in a stack and are deleted one at a time, in what order will they be removed?",4,STACK,5
Inorder Tree Traversal,1,STACK,2
Preorder Tree Traversal,1,STACK,2
Postorder Tree Traversal,1,STACK,2
Check if two binary trees are identical or not,5,STACK,9
"What is the policy, followed in Stack implementation? Stack is a linear or non-
linear data structure.",3,STACK,2
"Let S be an empty stack and Q be a queue having n numbers. isEmpty(Q) or isEmpty(S) returns true if Q or S is empty, else returns false. top(S) returns the number at the top of S without removing it from S. Similarly, front(Q) returns the number at the front of the queue Q without removing it from Q.
Determine the best- as well as the worst-case running time of an algorithm shown in Fig. 3. Justify your answers giving suitable examples. [Hint: Use n <= 4].
1. while (!isEmpty(Q))
2. { if (isEmpty(S) || top(S) >= front(Q))
3. { S = push(S,front(Q));
4. Q = dequeue(Q);
5. }
6. else
7. { Q = enqueue(Q,top(S));
8. S = pop(S);
9. }
10. }",2,STACK,5
Convert the given infix expression into an equivalent postfix expression using stacks. Show contents of the stack at each intermediate step. Use the precedence table as shown in Table 1. (A $ B + C) # (K + L – M * N + O ^ P * W / U),3,STACK,5
"Let the letters S, E, A, T, B, L has to be pushed on to an empty stack of characters in the order they appear from left to right. Consider that the output of pop() operation is appended in an initially empty output string. Determine the sequence in which push() and pop() operations should be called such that the contents in the output string should be STABLE.",1,STACK,2
Show stepwise a tree that Huffmanâ€™s greedy algorithm could produce for the sentence given in Fig. 1. Write optimal codes thus generated for all the different characters present in the sentence,12,STRING,6
Program for Return maximum occurring character in the input string,5,STRING,9
Program for Remove all duplicates from the input string.,5,STRING,9
Program for Print all the duplicates in the input string.,5,STRING,9
Program for Remove characters from the first string which are present in the second string,5,STRING,9
Program for A Program to check if strings are rotations of each other or not,10,STRING,9
Program for Print reverse of a string using recursion,10,STRING,9
Program for Write a C program to print all permutations of a given string,10,STRING,9
Program for Divide a string in N equal parts,10,STRING,9
"Program for Given a string, find its first non-repeating character",10,STRING,9
Program for Print list items containing all characters of a given word,10,STRING,9
Program for Reverse words in a given string,10,STRING,9
Program for Run Length Encoding,10,STRING,9
Program for Find the smallest window in a string containing all characters of another string,10,STRING,9
Program for Length of the longest substring without repeating characters,10,STRING,9
Program for Print all permutations with repetition of characters,10,STRING,9
Program for Print all interleavings of given two strings,10,STRING,9
Program for Check whether a given string is an interleaving of two other given strings,10,STRING,9
Program for Check whether two strings are anagram of each other,10,STRING,9
"Choose a correct statement about C String.
char ary[]=""Hello..!"";
A) Character array, ary is a string.
B) ary has no Null character at the end
C) String size is not mentioned
D) String can not contain special characters. explain",2,STRING,2
What is the Format specifier used to print a String or Character array in C Printf or Scanf function.?,1,STRING,2
"What is the output of C Program with Strings.?
int main()
{
char ary[]=""Discovery Channel"";
printf(""%s"",ary);
return 0;
}",4,STRING,5
"What is the output of C Program with Strings.?
int main()
{
char str[]={'g','l','o','b','e'};
printf(""%s"",str);
return 0;
}",4,STRING,5
"What is the output of C Program with Strings.?
int main()
{
char str[]={'g','l','o','b','y','\0'};
printf(""%s"",str);
return 0;
}",4,STRING,5
"How do you convert this char array to string.?
char str[]={'g','l','o','b','y'};",,STRING,5
"What is the output of C Program.?
int main()
{
int str[]={'g','l','o','b','y'};
printf(""A%c "",str);
printf(""A%s "",str);
printf(""A%c "",str[0]);
return 0;
}",4,STRING,5
"What is the output of C Program with arrays.?
int main()
{
char str[]={""C"",""A"",""T"",""\0""};
printf(""%s"",str);
return 0;
}",4,STRING,5
What is the maximum length of a C String.?,1,STRING,2
"What is the output of C program with strings.?
int main()
{
char str1[]=""JOHN"";
char str2[20];
str2= str1;
printf(""%s"",str2);
return 0;
}",4,STRING,5
"What is the output of C Program with arrays.?
int main()
{
char str[25];
scanf(""%s"", str);
printf(""%s"",str);
return 0;
}
//input: South Africa",4,STRING,5
"If the two strings are identical, then strcmp() function returns",1,STRING,2
"Which of the following function is correct that finds the length of a string?
A. int xstrlen(char *s)
{
int length=0;
while(*s!='\0')
{ length++; s++; }
return (length);
}
B. int xstrlen(char s)
{
int length=0;
while(*s!='\0')
length++; s++;
return (length);
}
C. int xstrlen(char *s)
{
int length=0;
while(*s!='\0')
length++;
return (length);
}
D. int xstrlen(char *s)
{
int length=0;
while(*s!='\0')
s++;
return (length);
} explain",5,STRING,5
Any function working with String knowns the String has ended when it encounters,1,STRING,2
Which string header should be included in your program to use String class?,1,STRING,2
"What is the length of the following string?

String str='Good morning!!!';

cout << str.length();",3,STRING,2
"What is the output of the following code?

String str1 = 'All' + ' ' + 'the' + ' ' + 'best!!';

cout << str1;",3,STRING,2
How to check if two strings are rotations of each other?,5,STRING,5
How do you count the number of words in String?,7,STRING,5
How do you remove a given character from String?,7,STRING,5
How to convert Integer to Roman String?,7,STRING,5
How to find the maximum occurring character in a given String?,7,STRING,5
How to remove all duplicates from a given string?,7,STRING,5
What Is The Difference Between The Strings And The Words Of A Language?,2,STRING,2
What Is Null String (Λ) ?,3,STRING,2
What Is The Concept Of Valid And Invalid Alphabets ?,1,STRING,2
Differentiate Kleene Star Closure And Plus?,3,STRING,2
Is String immutable in java?,1,STRING,2
How many different ways you can create a String object?,1,STRING,2
What is a leaf node?,2,TREE,2
What is a root node?,2,TREE,2
Algorithm to find the lowest common ancestor (LCA) of a binary tree,5,TREE,9
How do you check if a given binary tree is a subtree of another binary tree?,4,TREE,5
How do you find the distance between two nodes in a binary tree?,4,TREE,9
What is the Red-Black tree data structure?,2,TREE,2
How do you find if two trees are identical?,4,TREE,5
What is Binary Tree Data Structure?Explain its 5 types,6,TREE,9
"The maximum number of nodes in an ordinary binary tree of height h is € 2h +1 −1. In a BSTD of height h, is the maximum number of nodes € 3h +1 −1? Explain your answer.",4,TREE,5
How do we know that we account for all possible shared keys when we divide the inpet trees into two and calculate intersections recursively? What if a key on the left matches a key on the right half of the other tree?,4,TREE,5
What can we say about the height of such a tree?,2,TREE,2
Suppose that we were given the keys in the sequence one by one instead of all at once. Can you think of a way to select a uniformly random permutation?,2,TREE,2
State the properties of a binary tree,4,TREE,5
State the merits of linear representation of binary trees.,4,TREE,5
State the demerit of linear representation of binary trees.,4,TREE,5
What is the use of threaded binary tree?,2,TREE,2
. Define splay tree?What is the idea behind splaying?,6,TREE,9
"Two binary trees A and B are said to be isomorphic if, by swapping the left and right subtrees of some nodes of A, one can obtain a tree identical to B. For example, the following two binary trees are isomorphic. 5 5 / \ / \ 8 4 4 8 / \ / \ 2 6 2 6 / \ / \ 3 2 2 3 Write a recursive algorithm isIsomorphic( n1, n2) for checking if two trees are isomorphic. The arguments should be references to the root nodes of the two trees. To test if two non-null nodes are equal, assume each node has a key and check if the keys of the two nodes are equal. That way, our definition of “equal” does not involve other fields defined at each node, namely references to children",10,TREE,9
"Consider the binary tree (with null child references not shown): ""2"" / \ ""in"" ""november"" \ / \ ""can"" ""be"" ""quizzes"" / ""fun"" (a) What is the order of nodes visited in a pre-order traversal? (b) What is the order of nodes visited in a post-order traversal? last updated: 3rd Nov, 2017 at 16:15 2 COMP 250 Fall 2017 Exercises 9 - trees (c) Transform this binary tree into a binary search tree of height 2, defined by the natural ordering on strings. (d) Represent this binary tree using an array (of references to strings), such that the parent/child indices in the array are the same as that used in a heap",6,TREE,5
"Draw the binary tree whose in-order traversal is DBEAFC and whose pre-order traversal is ABDECF. (b) What is the post-order traversal of this tree? (c) Draw all binary search trees of height 2 that can be made from all the letters ABCDEF, assuming the natural ordering.",10,TREE,2
"How many binary search trees can you make from a,b,c,d assuming their natural ordering?",2,TREE,2
What is Spanning Trees? Explain Spanning Tree in detail with example.,4,TREE,5
What is Binary Tree? Explain Representation of Binary tree. Also explain different operation that can be performed on Binary tree.,6,TREE,5
"Explain Inorder, Preorder and Postorder Traversal operation on Binary tree with example",6,TREE,5
Construct a tree for the given inorder and postorder traversals. Inorder : DGBAHEICF Postorder : GDBHIEFCA,6,TREE,9
Discuss following with reference to trees. (i) Height of the tree (ii) Complete Binary Tree (iii) Expression tree (iv) Sibling (v) Full Binary Tree,10,TREE,9
"Define an AVL tree. Obtain an AVL tree by inserting one integer at a time in the following sequence. 150, 155, 160, 115, 110, 140, 120, 145, 130, 147, 170, 180. Show all the steps",10,TREE,9
"Considering the tree obtained after Q.2.(b) to be an AVL Tree, insert 50, 65, 55, and 70
 sequentially into it.",3,TREE,5
